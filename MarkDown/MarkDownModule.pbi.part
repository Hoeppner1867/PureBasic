;/ ============================
;/ =    MarkDownModule.pbi    =
;/ ============================
;/
;/ [ PB V5.7x / 64Bit / All OS / DPI ]
;/
;/  Gadget, Requester & HelpWindow for Markdown
;/
;/ © 2020 by Thorsten Hoeppner (12/2019)
;/

; Last Update: 17.04.2020
;
; - Added: Support of relative path for Help2HTML()
; - Added: Wildcards for help window search
;
; - Added: Invisible keywords '[<Invisble]'
; - Added: dynamic column widths for tables
;

;{ ===== MIT License =====
;
; Copyright (c) 2019 Thorsten Hoeppner
;
; Permission is hereby granted, free of charge, to any person obtaining a copy
; of this software and associated documentation files (the "Software"), to deal
; in the Software without restriction, including without limitation the rights
; to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
; copies of the Software, and to permit persons to whom the Software is
; furnished to do so, subject to the following conditions:
;
; The above copyright notice and this permission notice shall be included in all
; copies or substantial portions of the Software.
;
; THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
; IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
; FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
; AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
; LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
; OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
; SOFTWARE.
;}

;{ ===== Tea & Pizza Ware =====
; <purebasic@thprogs.de> has created this code. 
; If you find the code useful and you want to use it for your programs, 
; you are welcome to support my work with a cup of tea or a pizza
; (or the amount of money for it). 
; [ https://www.paypal.me/Hoeppner1867 ]
;}


;{ _____ MarkDown - Commands _____

; MarkDown::UsedImages()         - determines all images used in the markdown text
; MarkDown::InsertAsPDF()        - Insert converted markdown text into PDF
; MarkDown::InsertAsHTML()       - Insert converted markdown text into HTML
; MarkDown::SetPath()            - set path for images without path name

; ----- Gadget (#Enable_Gadget)-----

; MarkDown::AttachPopupMenu()
; MarkDown::Clear()              - similar to 'ClearGadgetItems()'
; MarkDown::Convert()            - convert markdown to HTML or PDF (without gadget)
; MarkDown::EventValue()         - returns links
; MarkDown::Export()             - export to HTML or PDF 
; MarkDown::Gadget()             - new MarkDown gadget
; MarkDown::GetData()            - similar to 'GetGadgetData()'
; MarkDown::GetText()            - similar to 'GetGadgetText()' [#MarkDown/#HTML]
; MarkDown::GetID()              - similar to 'GetGadgetData()', but string
; MarkDown::GotoHeading()        - goto heading with this ID
; MarkDown::Hide()               - similar to 'HideGadget()'
; MarkDown::SetAutoResizeFlags() - [#MoveX|#MoveY|#Width|#Height]
; MarkDown::SetAttribute()       - similar to 'SetGadgetAttribute()'
; MarkDown::SetColor()           - similar to 'SetGadgetColor()'
; MarkDown::SetData()            - similar to 'SetGadgetData()'
; MarkDown::SetFont()            - similar to 'SetGadgetFont()'
; MarkDown::SetID()              - similar to 'SetGadgetData()', but string
; MarkDown::SetMargins()         - defines the margins
; MarkDown::SetPath()            - Set the path to the Markdown file, for relative path names
; MarkDown::SetText()            - similar to 'SetGadgetText()'
; MarkDown::UseImage()           - uses an already loaded image

; ----- Requester (#Enable_Requester) -----

; MarkDown::Requester()

; ----- Help Window (#Enable_HelpWindow) -----

; MarkDown::Help()
; MarkDown::ChangeHelpTopic()
; MarkDown::EventLabel()

;}

;{ _____ Available Emojis _____

; :bookmark: / :date: / :mail: / :memo: / :pencil: / :phone: / :warning: / :bulb: / :paperclip: / :magnify:
; :angry: / :cool: / :eyes: / :laugh: / / :rofl: / :sad: / :smile: / :smirk: / :wink: / :worry:

;}


; XIncludeFile "ModuleEx.pbi"
; XIncludeFile "TreeExModule.pbi"
; XIncludeFile "NamedPipeModule.pbi"

; ***** If no PDF is required, this line can be commented out. *****
CompilerIf Not Defined(PDF, #PB_Module) : XIncludeFile "pbPDFModule.pbi" : CompilerEndIf

DeclareModule MarkDown
  
  #Version  = 20041700
  #ModuleEx = 20041700
  
  #Enable_Gadget     = #True
  #Enable_Requester  = #True
  #Enable_HelpWindow = #True
  #Enable_CreateHelp = #False
  #Enable_Emoji      = #True
  #Enable_ExportHTML = #True
  
	;- ===========================================================================
	;-   DeclareModule - Constants
  ;- ===========================================================================

  EnumerationBinary ;{ ScrollBar
		#ScrollBar_Border            ; Draw gadget border
		#ScrollBar_ButtonBorder      ; Draw button borders
		#ScrollBar_ThumbBorder       ; Draw thumb border
		#ScrollBar_DragLines         ; Draw drag lines
	EndEnumeration ;}
	
	Enumeration 1     ;{ ScrollBar Buttons
	  #ScrollBar_Up
	  #ScrollBar_Down
	  #ScrollBar_Left
	  #ScrollBar_Right
	EndEnumeration ;}
	
	#ScrollBar_Default   = #False
	#ScrollBar_Frame     = #ScrollBar_Border
	#ScrollBar_DragPoint = #ScrollBar_ButtonBorder|#ScrollBar_ThumbBorder|#ScrollBar_DragLines|#ScrollBar_Border 
	
  ;{ _____ Constants _____
  #Bullet$ = "•"
  
  #Help = -1
  
	EnumerationBinary ;{ Gadget Flags
		#AutoResize        ; Automatic resizing of the gadget
		#Borderless        ; Draw no border
		#UseExistingCanvas ; e.g. for dialogs
		#IgnorePath
		#CompletePath
		; Requester
		#YesNo
	  #YesNoCancel
	  #Info
	  #Question
	  #Error 
	  #Warning
	  ; Window
	  #KeywordsOnly  ; Search: Only keywords, no topics 
	  #Style_Frame
	  #Style_DragPoint
	EndEnumeration ;}
	
	Enumeration       ;{ Type
	  #Gadget
	  #Requester
	  #HelpWindow
	EndEnumeration  ;}
	
	Enumeration 1     ;{ Format
	  #MarkDown
	  #HTML
	  #PDF
	  #List
	  #Tree
	EndEnumeration ;}
	
	EnumerationBinary ;{ AutoResize
		#MoveX
		#MoveY
		#Width
		#Height
	EndEnumeration ;}
	
	Enumeration 1     ;{ Attribute
	  #Corner
	  #Margin_Left
	  #Margin_Right
	  #Margin_Top
	  #Margin_Bottom
	  #Indent
	  #LineSpacing
	  #ScrollBar
	EndEnumeration ;}
	
	Enumeration 1     ;{ Color
		#Color_Back
		#Color_BlockQuote
		#Color_Border
		#Color_Code
		#Color_Front
		#Color_HighlightBack
		#Color_Tooltip
		#Color_KeyStroke
		#Color_KeystrokeBack
		#Color_Keyword
		#Color_Line
		#Color_Link
		#Color_HighlightLink
		#Color_LineColor
		#Color_HeaderBack
		#ScrollBar_FrontColor
    #ScrollBar_BackColor 
    #ScrollBar_BorderColor
    #ScrollBar_ButtonColor
    #ScrollBar_ThumbColor
	EndEnumeration ;}
	
	EnumerationBinary ;{ Convert
	  #Create
	  #Content
	  #Close
	EndEnumeration ;}  
	
	CompilerIf #Enable_Requester
	  
	  #ButtonWidth  = 60
	  #ButtonHeight = 20
	  
	  #OK = 0
	  
	  Enumeration 1   ;{ Buttons
  	  #Click
  	  #Focus
  	EndEnumeration ;}
	  
	  Enumeration 2   ;{ Result
    	#Result_Yes
    	#Result_No
    	#Result_Cancel
    EndEnumeration ;}
	  
	CompilerEndIf
	
	CompilerIf Defined(ModuleEx, #PB_Module)

		#Event_Gadget   = ModuleEx::#Event_Gadget
		#Event_Theme    = ModuleEx::#Event_Theme
		#Event_Timer    = ModuleEx::#Event_Timer
		#Event_Message  = ModuleEx::#Event_Message
		
		#EventType_Link = ModuleEx::#EventType_Link
		
	CompilerElse

		Enumeration #PB_Event_FirstCustomValue
		  #Event_Gadget
		  #Event_Timer
		  #Event_Message
		EndEnumeration
		
		Enumeration #PB_EventType_FirstCustomValue
      #EventType_Link
    EndEnumeration
		
	CompilerEndIf
	;}
	
  ;- ===========================================================================
	;-   DeclareModule - Structure
  ;- ===========================================================================
	
	Structure Item_Structure               ;{ Help\Item()\...
    Titel.s
    Label.s
    Text.s
    Level.i
  EndStructure ;}
  
	Structure Words_Structure              ;{ Word Structure
    Font.i
    String.s
    Index.i
    Width.i
    Flag.i
  EndStructure ;}
  
  Structure Links_Structure              ;{ ...\Links\...
    String.s
    Destination.s
    Label.s
    Valid.i
  EndStructure  
    
  Structure TOC_Structure                ;{ ...\TOC()\...
    ID.s
    Level.i
    Label.s
    X.i
    Y.i
    Width.i
    Height.i
    List Words.Words_Structure()
  EndStructure ;}
 
  Structure Glossary_Structure           ;{ ...\Glossary()\...
    Label.s
    List Words.Words_Structure()
  EndStructure ;}
  
  Structure Keyword_Label_Structure      ;{ ...\Keyword()\...
    Name.s
    Page.i
    HeadingID.s
  EndStructure
  
  Structure Keywords_Structure           
    List Label.Keyword_Label_Structure()
  EndStructure ;}
  
	;- ===========================================================================
	;-   DeclareModule
	;- ===========================================================================
	
	Declare.i UsedImages(Markdown.s, Path.s, Map Images.s(), Flags.i=#False)
	Declare   Convert(MarkDown.s, Type.i, Path.s, File.s="", Title.s="")
	Declare   InsertAsPDF(PDF.i, MarkDown.s, LeftMargin.i=10, RightMargin.i=10, FontSize.i=12)
	Declare.s InsertAsHTML(MarkDown.s)
	Declare   SetPath(GNum.i, Path.s)
	Declare   SetText(GNum.i, Text.s, Path.s="")

	CompilerIf #Enable_Gadget
    Declare   AttachPopupMenu(GNum.i, PopUpNum.i)
    Declare   Clear(GNum.i)    
    Declare.s EventValue(GNum.i)
	  Declare.s EventLabel(GNum.i)
    Declare   Export(GNum.i, Type.i, File.s="", Title.s="")
    Declare.i Gadget(GNum.i, X.i, Y.i, Width.i, Height.i, Flags.i=#False, WindowNum.i=#PB_Default)
    Declare.q GetData(GNum.i)
    Declare.s GetID(GNum.i)
    Declare.s GetText(GNum.i, Type.i=#MarkDown, Title.s="")
    Declare   GotoHeading(GNum.i, ID.s)
    Declare   Hide(GNum.i, State.i=#True) 
    Declare   SetAutoResizeFlags(GNum.i, Flags.i)
    Declare   SetAttribute(GNum.i, Attribute.i, Value.i)
    Declare   SetColor(GNum.i, ColorTyp.i, Value.i)
    Declare   SetData(GNum.i, Value.q)
    Declare   SetFont(GNum.i, Name.s, Size.i) 
    Declare   SetID(GNum.i, String.s)
    Declare   SetMargins(GNum.i, Top.i, Left.i, Right.i=#PB_Default, Bottom.i=#PB_Default)
    Declare   UseImage(GNum.i, FileName.s, ImageNum.i)
  CompilerEndIf  

  CompilerIf #Enable_Requester
    Declare.i Requester(Title.s, Text.s, Flags.i=#False, Parent.i=#PB_Default)
  CompilerEndIf
  
  CompilerIf #Enable_HelpWindow

    CompilerIf Defined(PDF, #PB_Module)
      Declare.s Help2PDF(Title.s, File.s, FilePDF.s="", Orientation.s="P", Format.s="")
    CompilerEndIf  
    
    CompilerIf #Enable_ExportHTML
      Declare.s Help2HTML(Title.s, File.s, Folder.s="HTML", FileHTML.s="")
    CompilerEndIf
    
    Declare   SetHelpFont(Font.i, Type.i=#False)
    Declare   ChangeHelpTopic(Label.s)
    Declare.s Help(Title.s, File.s, Label.s="", Flags.i=#False, Parent.i=#PB_Default)
    
  CompilerEndIf
  
  CompilerIf #Enable_CreateHelp

    Declare.i CreateHelp(File.s)
    Declare.i AddHelpItem(Title.s, Markdown.s, Label.s="", Level.i=0)
    Declare   SaveHelp()
    
  CompilerEndIf 
  
  ;{ Internal
  Declare MergeHelp(List Items.Item_Structure(), List TOC.TOC_Structure(), Map Glossary.Glossary_Structure(), Map Keywords.Keywords_Structure(), List Links.Links_Structure())
  Declare UpdateHelp(GNum.i, List TOC.TOC_Structure(), Map Glossary.Glossary_Structure(), List Found.s(), Export.i=#False)
  ;}
  
EndDeclareModule

Module MarkDown

	EnableExplicit
	
	UsePNGImageDecoder()
	UseJPEGImageDecoder()
	
	CompilerIf #Enable_HelpWindow Or #Enable_CreateHelp
	  UseLZMAPacker()
	CompilerEndIf  
	
	;- ============================================================================
	;-   Module - Constants
	;- ============================================================================
	
  ;{ OS specific contants
  CompilerSelect #PB_Compiler_OS
    CompilerCase #PB_OS_Windows
      #ScrollBarSize  = 18
    CompilerCase #PB_OS_MacOS
      #ScrollBarSize  = 18
    CompilerCase #PB_OS_Linux
      #ScrollBarSize  = 18
  CompilerEndSelect ;}
  
  #ScrollBar_ButtonSize = 18

  #ScrollBar_Timer      = 100
	#ScrollBar_TimerDelay = 3
	
	Enumeration 1                              ;{ ScrollBar Buttons
	  #ScrollBar_Forwards
	  #ScrollBar_Backwards
	  #ScrollBar_Focus
	  #ScrollBar_Click
	EndEnumeration ;}
	
	#Return = 0
  
  #Caution$ = Chr($26A0)
  #Circle$  = Chr($26AA)
  #Cut$     = Chr($2026)
  #CodeBlock = 2
  #Parse     = 0
  
  Enumeration 1 ;{ MarkDown
    #Abbreviation
    #BlockQuote
    #Block
    #Bold
    #Code
    #CodeHeader
    #DefinitionList
    #Emoji
    #FootNote
    #Glossary
    #Heading
    #Highlight
    #Note
    #NoteHeader
    #Line
    #Image
    #Italic
    #Keystroke
    #Keyword
    #LineBreak
    #Link
    #OrderedList
    #Paragraph
    #StrikeThrough
    #Subscript
    #Superscript
    #Table
    #TableHeader
    #TaskList
    #Text
    #Underline
    #UnorderedList
    #AutoLink
    #InsertGlossary
    #InsertKeywords
    #InsertTOC
  EndEnumeration ;}
  
  Enumeration 1 ;{ Font
    #Font_Normal
	  #Font_Bold
	  #Font_Italic
	  #Font_BoldItalic
	  #Font_Code
	  #Font_FootNote
	  #Font_FootText
	  #Font_FootBold
	  #Font_FootItalic
	  #Font_FootBoldItalic
	  #FontNote
	  #Font_H6
	  #Font_H5
	  #Font_H4
	  #Font_H3
	  #Font_H2
	  #Font_H1
  EndEnumeration ;} 
  
  Enumeration 1
    #UseDraw
    #UsePDF
  EndEnumeration  
  
	;- ============================================================================
	;-   Module - Structures
	;- ============================================================================	
  
  Structure ScrollBar_Timer_Thread_Structure ;{ Thread\...
    Num.i
    Active.i
    Exit.i
  EndStructure ;}
  Global TimerThread.ScrollBar_Timer_Thread_Structure  
  
  Structure ScrollBar_Button_Structure       ;{ ...\ScrollBar\Item()\Buttons\Forwards\...
	  X.i
	  Y.i
	  Width.i
	  Height.i
	  State.i
	EndStructure ;}
	
	Structure ScrollBar_Buttons_Structure      ;{ ...\ScrollBar\Item()\Buttons\...
	  Backwards.ScrollBar_Button_Structure
	  Forwards.ScrollBar_Button_Structure
	EndStructure ;}
	
	Structure ScrollBar_Thumb_Structure        ;{ ...\ScrollBar\Item()\Thumb\...
	  X.i
	  Y.i
	  Width.i
	  Height.i
	  Factor.f
	  Size.i
	  State.i
	EndStructure ;}
	
  Structure ScrollBar_Area_Structure         ;{ ...\ScrollBar\Item()\Area\...
	  X.i
	  Y.i
	  Width.i
	  Height.i
	EndStructure ;}
  
	Structure ScrollBar_Item_Structure         ;{ ...\ScrollBar\Item()\...
    Type.i
    
    Pos.i
	  minPos.i
	  maxPos.i
	  Ratio.f
	  
		Minimum.i
		Maximum.i
		PageLength.i
		
		X.i
		Y.i
		Width.i
		Height.i
		
		Timer.i
	  TimerDelay.i
	  
	  Cursor.i
	  
	  Disable.i
		Hide.i

		Thumb.ScrollBar_Thumb_Structure
		Buttons.ScrollBar_Buttons_Structure
		Area.ScrollBar_Area_Structure

	EndStructure ;}  
	
	Structure ScrollBar_Color_Structure        ;{ ...\ScrollBar\Color\...
		Front.i
		Back.i
		Border.i
		Button.i
		Focus.i
		Gadget.i
		ScrollBar.i
		DisableFront.i
		DisableBack.i
	EndStructure  ;}
	
	Structure ScrollBar_Structure              ;{ ...\ScrollBar\...
	  Num.i
	  
	  Adjust.i
	  Radius.i

	  Flags.i
	  
	  Color.ScrollBar_Color_Structure

    Map Item.ScrollBar_Item_Structure()
  EndStructure ;}
  
  
  CompilerIf #Enable_HelpWindow
    
    Structure Help_Font_Structure
      Tree.i
      ListView.i
      Name.s
      Size.i
    EndStructure
    
    Structure Help_Sort_Structure
      Topic.s
      Index.i
    EndStructure
    
    Structure Help_Image_Structure
      GoHome.i
      GoNext.i
      GoPrevious.i
      Search.i
      Close.i
    EndStructure
    
    Structure Help_Window_Structure
      X.i
      Y.i
      Width.i
      Height.i
    EndStructure
    
    Structure Help_Structure
      TreeNum.i
      CanvasNum.i
      HomeNum.i
      NextNum.i
      PrevNum.i
      SearchNum.i
      InputNum.i
      ListNum.i
      Search.i
      File.s
      DataDir.s
      Font.Help_Font_Structure
      Window.Help_Window_Structure
      Image.Help_Image_Structure
      Map  Label.i()
      List History.i()
      List Item.Item_Structure()
    EndStructure  
    Global Help.Help_Structure
    
  CompilerEndIf  
 
  CompilerIf #Enable_Requester
    
    Structure Requester_Image_Structure  ;{ MarkDown()\Requester\Image\...
  	  Num.i
  	  Width.i
  	  Height.i
  	EndStructure ;}
    
    Structure Requester_Button_Structure ;{ MarkDown()\Requester\Button\...
  	  X.i
  	  Text.s
  	  State.i
  	  Result.i
  	  Visible.i
  	EndStructure ;}
    
    Structure Requester_Structure        ;{ MarkDown()\Requester\...
      FontID.i
      Padding.i
      ButtonY.i
      Result.i
      Image.Requester_Image_Structure
      Map Button.Requester_Button_Structure()
    EndStructure ;} 
  
  CompilerEndIf
  
  
  Structure CellBorder_Structure
    X.i
    Width.i
    Border.i
  EndStructure  
  
  Structure List_Structure               ;{ Lists\...
    Marker.s ; ul: - or + or * / ol: . or ) 
    Indent.i
    Start.i
    Level.i
  EndStructure ;}
  
  Structure Document_Structure           ;{ Document()\...
    Type.i
    BlockQuote.i
    Marker.s
    Level.i
    String.s
  EndStructure ;}
  Global NewList Document.Document_Structure()
  
  
  Structure Note_Rows_Structure          ;{ MarkDown()\Note()\Words()\...
    Width.i
    Height.i
    List Words.Words_Structure()
  EndStructure ;}
  
  Structure Note_Structure               ;{ MarkDown()\Note()\...
    Type.s
    Width.i
    Height.i
    List Row.Note_Rows_Structure()
  EndStructure ;}
  
  Structure Block_Structure              ;{ MarkDown()\Block()\...
    Font.i
    String.s
    List Row.s()
  EndStructure ;}

  Structure FootLabel_Structure          ;{ MarkDown()\FootLabel('label')\...
    Width.i
    Height.i
    List Words.Words_Structure()
  EndStructure ;}
  
  Structure Label_Structure              ;{ MarkDown()\Label('label')\...
    Destination.s
    Title.s
    String.s
  EndStructure ;}

  Structure Keyword_Structure            ;{ MarkDown()\Keyword('keyword')\...
    Found.i
    List HeadingID.s()
  EndStructure ;}
  
  Structure Footnote_Structure           ;{ MarkDown()\Footnote()\...
    X.i
    Y.i
    Width.i
    Height.i
    Label.s
  EndStructure ;}

  Structure Abbreviation_Structure       ;{ MarkDown()\Abbreviation()\...
    String.s
  EndStructure ;}
  
  Structure Word_Link_Structure          ;{ MarkDown()\...\...
    X.i
    Y.i
    Width.i
    Height.i
    Word.s
  EndStructure ;}
  
  Structure Image_Structure              ;{ MarkDown()\Image()\...
    X.i
    Y.i
    Width.i
    Height.i
    Label.s
    Source.s
    Title.s
  EndStructure ;}
  
  Structure Link_Structure               ;{ MarkDown()\Link()\...
    X.i
    Y.i
    Width.i
    Height.i
    URL.s
    Title.s
    String.s
    Label.s
    State.i
  EndStructure ;}

  Structure Lists_Row_Structure          ;{ MarkDown()\Lists()\Row()\...
    BlockQuote.i
    Width.i
    Height.i
    Level.i
    State.i
    String.s
    List Words.Words_Structure()
  EndStructure ;}
  
  Structure Lists_Structure              ;{ MarkDown()\Lists()\..
    Start.i
    List Row.Lists_Row_Structure()
  EndStructure ;}
  
  Structure Margin_Structure             ;{ MarkDown()\Margin\...
		Top.i
		Left.i
		Right.i
		Bottom.i
	EndStructure ;}
	
  Structure Table_Item_Structure         ;{ MarkDown()\Table()\Row()\Col('num')\Item()\...
    Type.i
    String.s
    Index.i
  EndStructure ;}
  
  Structure Table_Cols_Structure         ;{ MarkDown()\Table()\Row()\Col('num')\...
    Width.i
    Span.i
    List Words.Words_Structure()
  EndStructure ;}
  
  Structure Table_Row_Structure          ;{ MarkDown()\Table()\Row()\...
    Type.i
    Height.i
    Map Col.Table_Cols_Structure()
  EndStructure ;}
  
  Structure Table_Column_Structure       ;{ MarkDown()\Table()\Column\...
    Align.s
    Width.i
  EndStructure ;}
  
  Structure Table_Structure              ;{ MarkDown()\Table()\...
    Cols.i
    Width.i
    Map Column.Table_Column_Structure()
    List Row.Table_Row_Structure()
  EndStructure ;}
  
  Structure MarkDown_Items_Structure     ;{ MarkDown()\Items()\...
    ID.s
    Type.i
    Level.i
    BlockQuote.i
    Width.i
    Height.i
    Index.i
    List Words.Words_Structure()
  EndStructure ;}
  
  Structure MarkDown_ImageMem_Structure  ;{ MarkDown()\ImageMem()\...
    Type.i
    *Buffer
    Size.i
  EndStructure ;}
  
  Structure MarkDown_Required_Structure  ;{ MarkDown()\Required\...
    Width.i
    Height.i
  EndStructure ;}
  
  Structure MarkDown_Font_Structure      ;{ MarkDown()\Font\...
    ; FontNums
    Normal.i
    Bold.i
    Italic.i
    BoldItalic.i
    Code.i
    Note.i
    FootNote.i
    FootText.i
    FootBold.i
    FootItalic.i
    FootBoldItalic.i
    H1.i
    H2.i
    H3.i
    H4.i
    H5.i
    H6.i
  EndStructure ;}
  
	Structure MarkDown_Color_Structure     ;{ MarkDown()\Color\...
	  Back.i
	  BlockQuote.i
	  Border.i
	  Button.i
		Code.i
		DisableBack.i
		DisableFront.i
		Focus.i
		Front.i
		Found.i
		FoundBack.i
		Gadget.i
		HeaderBack.i
		Highlight.i
		Hint.i
		Keystroke.i
		KeyStrokeBack.i
		Keyword.i
		Link.i
		LinkHighlight.i
		Line.i
	EndStructure  ;}
	
	Structure MarkDown_Scroll_Structure    ;{ MarkDown()\ScrollBar\Item()\...
	  Num.i
	  MinPos.i
    MaxPos.i
    Offset.i
    Height.i
    Hide.i
  EndStructure ;}
	
	Structure MarkDown_Window_Structure    ;{ MarkDown()\Window\...
		Num.i
		Width.f
		Height.f
	EndStructure ;}

	Structure MarkDown_Size_Structure      ;{ MarkDown()\Size\...
		X.f
		Y.f
		Width.f
		Height.f
		Flags.i
	EndStructure ;}
	
	
	Structure MarkDown_Structure           ;{ MarkDown()\...
		CanvasNum.i
		PopupNum.i
		
		ID.s
		Quad.i
		PageLabel.s
		
		Type.i
		Path.s
		Text.s
		
		BlockQuote.i
		LeftBorder.i
		WrapPos.i
		WrapHeight.i
		
		Indent.i
		LineSpacing.f
		
    Radius.i

		Hide.i
		Disable.i
		ToolTip.i
		
		EventValue.s
		EventLabel.s
		
		ScrollOffset.i
		
		Flags.i

		Color.MarkDown_Color_Structure
		Font.MarkDown_Font_Structure
		Margin.Margin_Structure
		Required.MarkDown_Required_Structure
		ScrollBar.ScrollBar_Structure
		Size.MarkDown_Size_Structure
		Window.MarkDown_Window_Structure
		
		CompilerIf #Enable_Requester
		  Requester.Requester_Structure
		CompilerEndIf  
		
		Map  Abbreviation.Abbreviation_Structure()
		Map  FootLabel.FootLabel_Structure()
		Map  Glossary.Glossary_Structure()
		Map  ImageMem.MarkDown_ImageMem_Structure()
		Map  ImageNum.i()
		Map  Label.Label_Structure()
		Map  Keyword.Keyword_Structure()
		Map  HeadingID.i()
		
		List AbbrevWord.Word_Link_Structure()
		List Block.Block_Structure()
		List Footnote.Footnote_Structure()
		List GlossaryWord.Word_Link_Structure()
		List Image.Image_Structure()
		List Items.MarkDown_Items_Structure()
    List Link.Link_Structure()
    List Lists.Lists_Structure()
    List Table.Table_Structure()
    List TOC.TOC_Structure()
    List Note.Note_Structure()
    
	EndStructure ;}
	Global NewMap MarkDown.MarkDown_Structure()
	
	Global NewMap Emoji.i()
	
	;- ============================================================================
	;-   Module - Internal
	;- ============================================================================

	CompilerIf #PB_Compiler_OS = #PB_OS_MacOS
	  
		; Addition of mk-soft

		Procedure OSX_NSColorToRGBA(NSColor)
			Protected.cgfloat red, green, blue, alpha
			Protected nscolorspace, rgba
			nscolorspace = CocoaMessage(0, nscolor, "colorUsingColorSpaceName:$", @"NSCalibratedRGBColorSpace")
			If nscolorspace
				CocoaMessage(@red, nscolorspace, "redComponent")
				CocoaMessage(@green, nscolorspace, "greenComponent")
				CocoaMessage(@blue, nscolorspace, "blueComponent")
				CocoaMessage(@alpha, nscolorspace, "alphaComponent")
				rgba = RGBA(red * 255.9, green * 255.9, blue * 255.9, alpha * 255.)
				ProcedureReturn rgba
			EndIf
		EndProcedure

		Procedure OSX_NSColorToRGB(NSColor)
			Protected.cgfloat red, green, blue
			Protected r, g, b, a
			Protected nscolorspace, rgb
			nscolorspace = CocoaMessage(0, nscolor, "colorUsingColorSpaceName:$", @"NSCalibratedRGBColorSpace")
			If nscolorspace
				CocoaMessage(@red, nscolorspace, "redComponent")
				CocoaMessage(@green, nscolorspace, "greenComponent")
				CocoaMessage(@blue, nscolorspace, "blueComponent")
				rgb = RGB(red * 255.0, green * 255.0, blue * 255.0)
				ProcedureReturn rgb
			EndIf
		EndProcedure

	CompilerEndIf
	
  CompilerIf Defined(ModuleEx, #PB_Module)
    
    Procedure.i GetGadgetWindow()
      ProcedureReturn ModuleEx::GetGadgetWindow()
    EndProcedure
    
  CompilerElse  
    
    CompilerIf #PB_Compiler_OS = #PB_OS_Windows
      ; Thanks to mk-soft
      Import ""
        PB_Object_EnumerateStart(PB_Objects)
        PB_Object_EnumerateNext( PB_Objects, *ID.Integer )
        PB_Object_EnumerateAbort( PB_Objects )
        PB_Window_Objects.i
      EndImport
    CompilerElse
      ImportC ""
        PB_Object_EnumerateStart( PB_Objects )
        PB_Object_EnumerateNext( PB_Objects, *ID.Integer )
        PB_Object_EnumerateAbort( PB_Objects )
        PB_Window_Objects.i
      EndImport
    CompilerEndIf
    
    Procedure.i GetGadgetWindow()
      ; Thanks to mk-soft
      Define.i WindowID, Window, Result = #PB_Default
      
      WindowID = UseGadgetList(0)
      
      PB_Object_EnumerateStart(PB_Window_Objects)
      
      While PB_Object_EnumerateNext(PB_Window_Objects, @Window)
        If WindowID = WindowID(Window)
          Result = Window
          Break
        EndIf
      Wend
      
      PB_Object_EnumerateAbort(PB_Window_Objects)
      
      ProcedureReturn Result
    EndProcedure
    
  CompilerEndIf	
  
  
  Procedure.f dpiX(Num.i)
	  If Num > 0  
	    ProcedureReturn DesktopScaledX(Num)
	  EndIf   
	EndProcedure

	Procedure.f dpiY(Num.i)
	  If Num > 0  
	    ProcedureReturn DesktopScaledY(Num)
	  EndIf  
	EndProcedure
	
	Procedure.i mm_(Pixel.i)
	  ;px = mm * 96 / 25,4mm
	  ProcedureReturn Round(Pixel * 25.4 / 96, #PB_Round_Nearest)
	EndProcedure
	
	Procedure.s GetAbsolutePath_(Path.s, File.s, Flags.i=#False)
    Define.i i, PS
    Define.s PathPart$, Path$
    
    If Flags & #IgnorePath
      ProcedureReturn GetFilePart(File)
    EndIf  
    
    PathPart$ = GetPathPart(File)
    
    CompilerIf #PB_Compiler_OS = #PB_OS_Windows
      PathPart$ = ReplaceString(PathPart$, "/", "\")
    CompilerElse
      PathPart$ = ReplaceString(PathPart$, "\", "/")
    CompilerEndIf  
    
    If PathPart$
      
      If CountString(PathPart$, ":" + #PS$) = 1 Or Left(PathPart$, 2) = #PS$ + #PS$ ;{ Absolute path name
        
        ProcedureReturn File
        ;}
      Else                                                                          ;{ Relative path name
        
        If Left(PathPart$, 3) = ".." + #PS$    ;{ A relative path to a file in a directory that is a peer of the current directory
  
          Path$ = ""
          Path  = ReplaceString(Path, #PS$ + #PS$, "|" + #PS$)
          
          PS = CountString(Path, #PS$)
          If PS > 1
            For i=1 To PS - 1
              Path$ + StringField(Path, i, #PS$) + #PS$
            Next
            ProcedureReturn ReplaceString(Path$, "|", #PS$) + Mid(File, 4)
          Else
            ProcedureReturn ReplaceString(Path,  "|", #PS$) + Mid(File, 4)
          EndIf  
          ;}
        ElseIf Left(PathPart$, 2) = "." + #PS$ ;{ A relative path to a file in the current directory    
          ProcedureReturn Path + Mid(File, 3)
          ;}
        ElseIf Left(PathPart$, 1) = #PS$       ;{ An absolute path from the root of the current drive
  
          Path  = ReplaceString(Path, #PS$ + #PS$, "|" + #PS$)
          Path$ = StringField(Path, 1, #PS$) + #PS$
          
          ProcedureReturn ReplaceString(Path$, "|", #PS$) + Mid(File, 2)
          ;}
        ElseIf Mid(PathPart$, 2, 1) = ":"      ;{ A relative path from the current directory of the drive
          
          Path$ = Left(PathPart$, 2) + Mid(Path, 3)
          
          ProcedureReturn  Path$ + Mid(File, 3)
          ;}  
        Else                                   ;{ A relative path to a file in a subdirectory of the current directory
          ProcedureReturn Path + File
          ;}
        EndIf
        ;}
      EndIf
      
    Else
      ProcedureReturn Path + File
    EndIf  
    
  EndProcedure  
	
	Procedure.s WordOnly_(Word.s)
    ; word with or without punctuation etc.
    Define.i i 
    Define.s Char$, Diff1$, Diff2$
    
    Word = Trim(Word)

    For i=1 To 2
      Char$ = Left(Word, 1)
      Select Char$
        Case "{", "[", "(", "<"
          Word = LTrim(Word, Char$)
        Case Chr(34), "'", "«", "»"
          Word = LTrim(Word, Char$)
        Default
          Break
      EndSelect
    Next
    
    For i=1 To 2
      Char$ = Right(Word, 1)
      Select Char$
        Case ".", ":", ",", ";", "!", "?"
          Word = RTrim(Word, Char$)
        Case  ")", "]", "}", ">"
          Word = RTrim(Word, Char$)
        Case Chr(34), "'", "«", "»"
          Word = RTrim(Word, Char$)
        Case " "
          Word = LTrim(Word, Char$)
        Default
          Break
      EndSelect
    Next

    ProcedureReturn Word
  EndProcedure
  
	Procedure   FreeFonts_()
	  
	  If IsFont(MarkDown()\Font\Normal)         : FreeFont(MarkDown()\Font\Normal)         : EndIf
	  If IsFont(MarkDown()\Font\Bold)           : FreeFont(MarkDown()\Font\Bold)           : EndIf
	  If IsFont(MarkDown()\Font\Italic)         : FreeFont(MarkDown()\Font\Italic)         : EndIf
	  If IsFont(MarkDown()\Font\BoldItalic)     : FreeFont(MarkDown()\Font\BoldItalic)     : EndIf
	  If IsFont(MarkDown()\Font\Code)           : FreeFont(MarkDown()\Font\Code)           : EndIf
	  If IsFont(MarkDown()\Font\FootNote)       : FreeFont(MarkDown()\Font\FootNote)       : EndIf
	  If IsFont(MarkDown()\Font\FootText)       : FreeFont(MarkDown()\Font\FootText)       : EndIf
	  If IsFont(MarkDown()\Font\FootBold)       : FreeFont(MarkDown()\Font\FootBold)       : EndIf
	  If IsFont(MarkDown()\Font\FootItalic)     : FreeFont(MarkDown()\Font\FootItalic)     : EndIf
	  If IsFont(MarkDown()\Font\FootBoldItalic) : FreeFont(MarkDown()\Font\FootBoldItalic) : EndIf
	  
	  If IsFont(MarkDown()\Font\H6) : FreeFont(MarkDown()\Font\H6) : EndIf
	  If IsFont(MarkDown()\Font\H5) : FreeFont(MarkDown()\Font\H5) : EndIf
	  If IsFont(MarkDown()\Font\H4) : FreeFont(MarkDown()\Font\H4) : EndIf
	  If IsFont(MarkDown()\Font\H3) : FreeFont(MarkDown()\Font\H3) : EndIf
	  If IsFont(MarkDown()\Font\H2) : FreeFont(MarkDown()\Font\H2) : EndIf
	  If IsFont(MarkDown()\Font\H1) : FreeFont(MarkDown()\Font\H1) : EndIf
	  
	EndProcedure
	
	Procedure   LoadFonts_(Name.s, Size.i)
    
	  MarkDown()\Font\Normal     = LoadFont(#PB_Any, Name, Size)
	  MarkDown()\Font\Bold       = LoadFont(#PB_Any, Name, Size, #PB_Font_Bold)
	  MarkDown()\Font\Italic     = LoadFont(#PB_Any, Name, Size, #PB_Font_Italic)
	  MarkDown()\Font\BoldItalic = LoadFont(#PB_Any, Name, Size, #PB_Font_Bold|#PB_Font_Italic)
	  MarkDown()\Font\Code       = LoadFont(#PB_Any, "Courier New", Size + 1)
	  MarkDown()\Font\Note       = LoadFont(#PB_Any, "Arial", Size + 4, #PB_Font_Bold)
	  
	  MarkDown()\Font\FootNote       = LoadFont(#PB_Any, Name, Round(Size / 1.5, #PB_Round_Up), #PB_Font_Bold)
	  MarkDown()\Font\FootText       = LoadFont(#PB_Any, Name, Size - 2)
	  MarkDown()\Font\FootBold       = LoadFont(#PB_Any, Name, Size - 2, #PB_Font_Bold)
	  MarkDown()\Font\FootItalic     = LoadFont(#PB_Any, Name, Size - 2, #PB_Font_Italic)
	  MarkDown()\Font\FootBoldItalic = LoadFont(#PB_Any, Name, Size - 2, #PB_Font_Bold|#PB_Font_Italic)
	  
	  MarkDown()\Font\H6 = LoadFont(#PB_Any, Name, Size - 4,     #PB_Font_Bold)
	  MarkDown()\Font\H5 = LoadFont(#PB_Any, Name, Size - 2, #PB_Font_Bold)
	  MarkDown()\Font\H4 = LoadFont(#PB_Any, Name, Size, #PB_Font_Bold)
	  MarkDown()\Font\H3 = LoadFont(#PB_Any, Name, Size + 2, #PB_Font_Bold)
	  MarkDown()\Font\H2 = LoadFont(#PB_Any, Name, Size + 6, #PB_Font_Bold)
	  MarkDown()\Font\H1 = LoadFont(#PB_Any, Name, Size + 12, #PB_Font_Bold)
	  
	EndProcedure
	
	Procedure   LoadEmojis_()
	  
    CompilerIf Defined(PDF, #PB_Module)
	    Emoji(":check0:")    = CatchImage(#PB_Any, ?Check0, 145)
	    Emoji(":check1:")    = CatchImage(#PB_Any, ?Check1, 276)
	  CompilerEndIf

	  CompilerIf #Enable_Emoji
  	  Emoji(":angry:")     = CatchImage(#PB_Any, ?Angry, 540)
  	  Emoji(":bookmark:")  = CatchImage(#PB_Any, ?BookMark, 334)
  	  Emoji(":cool:")      = CatchImage(#PB_Any, ?Cool, 629)
  	  Emoji(":date:")      = CatchImage(#PB_Any, ?Calendar, 485)
  	  Emoji(":eyes:")      = CatchImage(#PB_Any, ?Eyes, 583)
  	  Emoji(":laugh:")     = CatchImage(#PB_Any, ?Laugh, 568)
      Emoji(":mail:")      = CatchImage(#PB_Any, ?Mail, 437)  
      Emoji(":memo:")      = CatchImage(#PB_Any, ?Memo, 408) 
      Emoji(":pencil:")    = CatchImage(#PB_Any, ?Pencil, 480)
      Emoji(":phone:")     = CatchImage(#PB_Any, ?Phone, 383)
      Emoji(":rolf:")      = CatchImage(#PB_Any, ?Rofl, 636)
      Emoji(":sad:")       = CatchImage(#PB_Any, ?Sad, 521)
      Emoji(":smile:")     = CatchImage(#PB_Any, ?Smile, 512)
      Emoji(":smirk:")     = CatchImage(#PB_Any, ?Smirk, 532)
      Emoji(":wink:")      = CatchImage(#PB_Any, ?Wink, 553)
      Emoji(":worry:")     = CatchImage(#PB_Any, ?Worry, 554)
      Emoji(":warning:")   = CatchImage(#PB_Any, ?Attention, 565)
      Emoji(":bulb:")      = CatchImage(#PB_Any, ?Bulb, 396)
      Emoji(":paperclip:") = CatchImage(#PB_Any, ?Clip, 474)
      Emoji(":mag:")       = CatchImage(#PB_Any, ?Magnifier, 520)
    CompilerEndIf
    
  EndProcedure

  Procedure.i CalcScrollBarThumb_()
	  Define.i Size, Range, HRange
	  
	  If FindMapElement(MarkDown()\ScrollBar\Item(), "VScroll")
	    
  	  MarkDown()\ScrollBar\Item()\minPos   = MarkDown()\ScrollBar\Item()\Minimum
  	  MarkDown()\ScrollBar\Item()\maxPos   = MarkDown()\ScrollBar\Item()\Maximum - MarkDown()\ScrollBar\Item()\PageLength + 1
  	  MarkDown()\ScrollBar\Item()\Ratio    = MarkDown()\ScrollBar\Item()\PageLength / MarkDown()\ScrollBar\Item()\Maximum
  	  MarkDown()\ScrollBar\Item()\Pos      = MarkDown()\ScrollBar\Item()\Minimum
  	  
  	  MarkDown()\ScrollBar\Item()\Area\X       = MarkDown()\ScrollBar\Item()\X
  	  MarkDown()\ScrollBar\Item()\Area\Y       = MarkDown()\ScrollBar\Item()\Y + dpiY(#ScrollBar_ButtonSize) + dpiY(1)
  	  MarkDown()\ScrollBar\Item()\Area\Width   = MarkDown()\ScrollBar\Item()\Width
  	  MarkDown()\ScrollBar\Item()\Area\Height  = MarkDown()\ScrollBar\Item()\Height - dpiY(MarkDown()\ScrollBar\Adjust) - dpiY(#ScrollBar_ButtonSize * 2) - dpiY(2)
  	  
  	  Range = MarkDown()\ScrollBar\Item()\maxPos - MarkDown()\ScrollBar\Item()\minPos
  	  
  	  MarkDown()\ScrollBar\Item()\Thumb\Y      = MarkDown()\ScrollBar\Item()\Area\Y
  	  MarkDown()\ScrollBar\Item()\Thumb\Size   = Round(MarkDown()\ScrollBar\Item()\Area\Height * MarkDown()\ScrollBar\Item()\Ratio, #PB_Round_Down)
  	  MarkDown()\ScrollBar\Item()\Thumb\Factor = (MarkDown()\ScrollBar\Item()\Area\Height - MarkDown()\ScrollBar\Item()\Thumb\Size) / Range
  	  
	  EndIf   

	EndProcedure
	
	Procedure.i GetSteps_(Cursor.i)
	  Define.i Steps
	  
	  Steps = (Cursor - MarkDown()\ScrollBar\Item()\Cursor) / MarkDown()\ScrollBar\Item()\Thumb\Factor
	  
	  If Steps = 0
	    If Cursor < MarkDown()\ScrollBar\Item()\Cursor
	      Steps = -1
	    Else
	      Steps = 1
	    EndIf
	  EndIf
	  
	  ProcedureReturn Steps
	EndProcedure
	
	Procedure.i AdjustScrollBars_()
	  Define.i Height
	  
    Height = GadgetHeight(MarkDown()\CanvasNum) 
    
    If FindMapElement(MarkDown()\ScrollBar\Item(), "VScroll")
      
      If MarkDown()\Required\Height > Height

        If MarkDown()\ScrollBar\Item()\Hide
          CalcScrollBarThumb_()
          MarkDown()\ScrollBar\Item()\Hide = #False
        EndIf  
        
        ProcedureReturn #True
      Else
        
        If MarkDown()\ScrollBar\Item()\Hide = #False
          MarkDown()\ScrollBar\Item()\Hide = #True
        EndIf  
        
        ProcedureReturn #True
      EndIf
      
    EndIf
    
	  ProcedureReturn #False
	EndProcedure
	
	Procedure   Clear_(Image.i=#False)
	  
	  If Image : ClearMap(MarkDown()\ImageNum()) : EndIf  
	  
	  ClearMap(MarkDown()\Abbreviation())
	  ClearMap(MarkDown()\FootLabel())
	  ClearMap(MarkDown()\Label())
	  
    ClearList(MarkDown()\AbbrevWord())
	  ClearList(MarkDown()\Block())
	  ClearList(MarkDown()\Footnote())
	  ClearList(MarkDown()\Image())
	  ClearList(MarkDown()\Items())
	  ClearList(MarkDown()\Link())
	  ClearList(MarkDown()\Lists())
	  ClearList(MarkDown()\Table())
	  ClearList(MarkDown()\TOC())
	  
	EndProcedure
	
	Procedure.i GetSpanWidth_(Idx.i, Span.i, Map ColWidth.i(), PDF.i=#False)
    Define.i i, Width
    
    For i=Idx To Idx + Span - 1
      If PDF
        Width + mm_(ColWidth(Str(i))) + 4
      Else 
        Width + ColWidth(Str(i))
      EndIf 
    Next
    
    ProcedureReturn Width
  EndProcedure  
	
  Procedure.i DrawingFont_(Font.i)

    Select Font
      Case #Font_Bold
        DrawingFont(FontID(MarkDown()\Font\Bold))
      Case #Font_Italic
        DrawingFont(FontID(MarkDown()\Font\Italic))
      Case #Font_BoldItalic  
        DrawingFont(FontID(MarkDown()\Font\BoldItalic))
      Case #Font_FootNote
        DrawingFont(FontID(MarkDown()\Font\FootNote))
      Case #Font_FootText
        DrawingFont(FontID(MarkDown()\Font\FootText))
      Case #Font_FootBold
        DrawingFont(FontID(MarkDown()\Font\FootBold))
      Case #Font_FootItalic
        DrawingFont(FontID(MarkDown()\Font\FootItalic))
      Case #Font_FootBoldItalic
        DrawingFont(FontID(MarkDown()\Font\FootBoldItalic))
      Case #Font_Code
        DrawingFont(FontID(MarkDown()\Font\Code))
      Case #Font_H6
        DrawingFont(FontID(MarkDown()\Font\H6))
      Case #Font_H5
        DrawingFont(FontID(MarkDown()\Font\H5))
      Case #Font_H4
        DrawingFont(FontID(MarkDown()\Font\H4))
      Case #Font_H3
        DrawingFont(FontID(MarkDown()\Font\H3))
      Case #Font_H2
        DrawingFont(FontID(MarkDown()\Font\H2))
      Case #Font_H1 
        DrawingFont(FontID(MarkDown()\Font\H1))
      Default
        DrawingFont(FontID(MarkDown()\Font\Normal))
    EndSelect
    
    ProcedureReturn Font
  EndProcedure
 
  Procedure.i DetermineTextSize_(NoGadget.i=#False)
    Define.i Font, TextHeight, Image, Output, OutputNum
    Define.i Key$, Image$, File$

    Font = #PB_Default
    
    MarkDown()\Required\Width  = 0
    MarkDown()\Required\Height = 0
    
    If NoGadget
      OutputNum = CreateImage(#PB_Any, 10, 10)
      If OutputNum
        Output = ImageOutput(OutputNum)
      Else
        ProcedureReturn #False
      EndIf  
    ElseIf IsGadget(MarkDown()\CanvasNum)
      Output = CanvasOutput(MarkDown()\CanvasNum)
    Else
      ProcedureReturn #False
    EndIf  
    
    If StartDrawing(Output)
      
      ;{ _____ Items _____
      ForEach MarkDown()\Items()
        
        DrawingFont(FontID(MarkDown()\Font\Normal))
        
        MarkDown()\Items()\Width  = 0
        MarkDown()\Items()\Height = TextHeight("X")

        ForEach MarkDown()\Items()\Words()
          
          If Font <> MarkDown()\Items()\Words()\Font : Font = DrawingFont_(MarkDown()\Items()\Words()\Font) : EndIf
          
          Select MarkDown()\Items()\Words()\Flag
            Case #Emoji     ;{ Emoji (16x16)
              TextHeight = dpiY(16)
              MarkDown()\Items()\Words()\Width = dpiX(16)
              ;}
            Case #Image     ;{ Image
              
              If SelectElement(MarkDown()\Image(), MarkDown()\Items()\Words()\Index)
                
                Image$ = GetFilePart(MarkDown()\Image()\Source)
                File$  = GetAbsolutePath_(MarkDown()\Path, MarkDown()\Image()\Source)

                If FindMapElement(MarkDown()\ImageNum(), Image$) = #False
                  If AddMapElement(MarkDown()\ImageNum(), Image$)
                    MarkDown()\ImageNum() = LoadImage(#PB_Any, File$) 
                  EndIf
                EndIf
                
                If IsImage(MarkDown()\ImageNum())
  			          MarkDown()\Image()\Width  = ImageWidth(MarkDown()\ImageNum())
  			          MarkDown()\Image()\Height = ImageHeight(MarkDown()\ImageNum())
  			          TextHeight = dpiY(MarkDown()\Image()\Height)
  			          MarkDown()\Items()\Words()\Width = dpiX(MarkDown()\Image()\Width)  
  			        EndIf
 
  			      EndIf
  			      ;}
  			    Case #Keystroke ;{ Keystroke (5 + Key + 5)  
  			      TextHeight = TextHeight(MarkDown()\Items()\Words()\String)
  			      MarkDown()\Items()\Words()\Width = TextWidth(MarkDown()\Items()\Words()\String) + dpiX(10)
  			      ;}
  			    Default  
              TextHeight = TextHeight(MarkDown()\Items()\Words()\String)
              MarkDown()\Items()\Words()\Width = TextWidth(MarkDown()\Items()\Words()\String)
          EndSelect
          
          MarkDown()\Items()\Width + MarkDown()\Items()\Words()\Width
          If TextHeight > MarkDown()\Items()\Height : MarkDown()\Items()\Height = TextHeight : EndIf
          
        Next
        
        MarkDown()\Items()\Height * MarkDown()\LineSpacing
        
        MarkDown()\Required\Height + MarkDown()\Items()\Height
        If MarkDown()\Items()\Width > MarkDown()\Required\Width : MarkDown()\Required\Width = MarkDown()\Items()\Width : EndIf 

      Next ;}
      
      ;{ _____ Lists _____
      
      ForEach MarkDown()\Lists()
        
        Font = #PB_Default
        TextHeight = 0
        
        ForEach MarkDown()\Lists()\Row() ;{ List rows
          
          DrawingFont(FontID(MarkDown()\Font\Normal))
          
          MarkDown()\Lists()\Row()\Width  = 0
          MarkDown()\Lists()\Row()\Height = TextHeight("X")
          
          ForEach MarkDown()\Lists()\Row()\Words()
        
            If Font <> MarkDown()\Lists()\Row()\Words()\Font : Font = DrawingFont_(MarkDown()\Lists()\Row()\Words()\Font) : EndIf
            
            Select MarkDown()\Lists()\Row()\Words()\Flag
              Case #Emoji     ;{ Emoji (16x16)
                TextHeight = dpiY(16)
                MarkDown()\Lists()\Row()\Words()\Width = dpiX(16)
                ;}
              Case #Image     ;{ Image
                
                If SelectElement(MarkDown()\Image(), MarkDown()\Lists()\Row()\Words()\Index)
                  
                  Image$ = GetFilePart(MarkDown()\Image()\Source)
                  File$  = GetAbsolutePath_(MarkDown()\Path, MarkDown()\Image()\Source)
                  
                  If FindMapElement(MarkDown()\ImageNum(), Image$) = #False
                    If AddMapElement(MarkDown()\ImageNum(), Image$)
                      MarkDown()\ImageNum() = LoadImage(#PB_Any, File$)
                    EndIf
                  EndIf
                  
                  If IsImage(MarkDown()\ImageNum())
    			          MarkDown()\Image()\Width  = ImageWidth(MarkDown()\ImageNum())
    			          MarkDown()\Image()\Height = ImageHeight(MarkDown()\ImageNum())
    			          TextHeight = dpiY(MarkDown()\Image()\Height)
    			          MarkDown()\Items()\Words()\Width = dpiX(MarkDown()\Image()\Width)  
    			        EndIf
    			        
    			      EndIf
    			      ;}
    			    Case #Keystroke ;{ Keystroke (5 + Key + 5)  
    			      TextHeight = TextHeight(MarkDown()\Items()\Words()\String)
    			      MarkDown()\Items()\Words()\Width = TextWidth(MarkDown()\Items()\Words()\String) + dpiX(10)
    			      ;}
    			    Default  
                TextHeight = TextHeight(MarkDown()\Lists()\Row()\Words()\String)
                MarkDown()\Lists()\Row()\Words()\Width = TextWidth(MarkDown()\Lists()\Row()\Words()\String)
            EndSelect
           
            MarkDown()\Lists()\Row()\Width + MarkDown()\Lists()\Row()\Words()\Width
            If TextHeight > MarkDown()\Lists()\Row()\Height : MarkDown()\Lists()\Row()\Height = TextHeight : EndIf
            
          Next
         
          MarkDown()\Lists()\Row()\Height * MarkDown()\LineSpacing
          MarkDown()\Required\Height + MarkDown()\Lists()\Row()\Height
          
          If MarkDown()\Lists()\Row()\Width > MarkDown()\Required\Width : MarkDown()\Required\Width = MarkDown()\Lists()\Row()\Width : EndIf
          ;}
        Next

      Next ;} 

      ;{ _____ Tables _____
      ForEach MarkDown()\Table()
        
        Font = #PB_Default
        TextHeight = 0
        
        ForEach MarkDown()\Table()\Column() : MarkDown()\Table()\Column()\Width = 0 : Next  
        
        ForEach MarkDown()\Table()\Row()
          
          DrawingFont(FontID(MarkDown()\Font\Normal))
        
          MarkDown()\Table()\Row()\Height = TextHeight("X")
          
          ForEach MarkDown()\Table()\Row()\Col() ;{ Columns
            
            Key$ = MapKey(MarkDown()\Table()\Row()\Col())
            
            MarkDown()\Table()\Row()\Col()\Width = 0 
            
            ForEach MarkDown()\Table()\Row()\Col()\Words() ;{ Words

              If Font <> MarkDown()\Table()\Row()\Col()\Words()\Font
                Font = DrawingFont_(MarkDown()\Table()\Row()\Col()\Words()\Font)
              EndIf        
              
              Select MarkDown()\Table()\Row()\Col()\Words()\Flag
                Case #Emoji     ;{ Emoji (16x16)
                  TextHeight = dpiY(16)
                  MarkDown()\Table()\Row()\Col()\Words()\Width = dpiX(16)
                  ;}
                Case #Image     ;{ Image
                  
                  If SelectElement(MarkDown()\Image(), MarkDown()\Table()\Row()\Col()\Words()\Index)
                    
                    Image$ = GetFilePart(MarkDown()\Image()\Source)
                    File$  = GetAbsolutePath_(MarkDown()\Path, MarkDown()\Image()\Source)
                    
                    If FindMapElement(MarkDown()\ImageNum(), Image$) = #False
                      If AddMapElement(MarkDown()\ImageNum(), Image$) 
                        MarkDown()\ImageNum() = LoadImage(#PB_Any, File$)
                      EndIf
                    EndIf
                    
                    If IsImage(MarkDown()\ImageNum())
      			          MarkDown()\Image()\Width  = ImageWidth(MarkDown()\ImageNum())
      			          MarkDown()\Image()\Height = ImageHeight(MarkDown()\ImageNum())
      			          TextHeight = dpiY(MarkDown()\Image()\Height)
      			          MarkDown()\Items()\Words()\Width = dpiX(MarkDown()\Image()\Width)  
      			        EndIf
      			        
      			      EndIf
      			      ;}
      			    Case #Keystroke ;{ Keystroke (5 + Key + 5)  
      			      TextHeight = TextHeight(MarkDown()\Items()\Words()\String)
      			      MarkDown()\Items()\Words()\Width = TextWidth(MarkDown()\Items()\Words()\String) + dpiX(10) 
      			      ;}
      			    Default  
                  TextHeight = TextHeight(MarkDown()\Table()\Row()\Col()\Words()\String)
                  MarkDown()\Table()\Row()\Col()\Words()\Width = TextWidth(MarkDown()\Table()\Row()\Col()\Words()\String)
              EndSelect
            
              MarkDown()\Table()\Row()\Col()\Width + MarkDown()\Table()\Row()\Col()\Words()\Width
              If TextHeight > MarkDown()\Table()\Row()\Height : MarkDown()\Table()\Row()\Height = TextHeight : EndIf
              ;}
            Next
            
            If MarkDown()\Table()\Row()\Col()\Width > MarkDown()\Table()\Column(Key$)\Width : MarkDown()\Table()\Column(Key$)\Width = MarkDown()\Table()\Row()\Col()\Width : EndIf
            ;}
          Next          
          
          MarkDown()\Table()\Row()\Height * MarkDown()\LineSpacing
          MarkDown()\Required\Height + MarkDown()\Table()\Row()\Height
        Next
        
        DrawingFont(FontID(MarkDown()\Font\Normal))
        
        MarkDown()\Table()\Width = 0

        ForEach MarkDown()\Table()\Column()
          MarkDown()\Table()\Column()\Width + dpiX(10)
          MarkDown()\Table()\Width + MarkDown()\Table()\Column()\Width
        Next
        
        If MarkDown()\Table()\Width > MarkDown()\Required\Width : MarkDown()\Required\Width = MarkDown()\Table()\Width : EndIf
        
      Next  
      ;}
      
      ;{ _____ Notes _____
      ForEach MarkDown()\Note()
        
        Font = #PB_Default
        TextHeight = 0
        
        DrawingFont(FontID(MarkDown()\Font\Normal))
        MarkDown()\Note()\Height = TextHeight("X")
        
        ForEach MarkDown()\Note()\Row()
  
          MarkDown()\Note()\Row()\Width = 0
          
          ForEach MarkDown()\Note()\Row()\Words()
          
            If Font <> MarkDown()\Note()\Row()\Words()\Font : Font = DrawingFont_(MarkDown()\Note()\Row()\Words()\Font) : EndIf
            
            Select MarkDown()\Note()\Row()\Words()\Flag
              Case #Emoji     ;{ Emoji (16x16)
                TextHeight = dpiY(16)
                MarkDown()\Note()\Row()\Words()\Width = dpiX(16)
                ;}
              Case #Image     ;{ Image
                
                If SelectElement(MarkDown()\Image(), MarkDown()\Note()\Row()\Words()\Index)
                  
                  Image$ = GetFilePart(MarkDown()\Image()\Source)
                  File$  = GetAbsolutePath_(MarkDown()\Path, MarkDown()\Image()\Source)
                  
                  If FindMapElement(MarkDown()\ImageNum(), Image$) = #False
                    If AddMapElement(MarkDown()\ImageNum(), Image$)
                      MarkDown()\ImageNum() = LoadImage(#PB_Any, File$)
                    EndIf
                  EndIf
                  
                  If IsImage(MarkDown()\ImageNum())
    			          MarkDown()\Image()\Width  = ImageWidth(MarkDown()\ImageNum())
    			          MarkDown()\Image()\Height = ImageHeight(MarkDown()\ImageNum())
    			          TextHeight = dpiY(MarkDown()\Image()\Height)
    			          MarkDown()\Note()\Row()\Words()\Width = dpiX(MarkDown()\Image()\Width)  
    			        EndIf
   
    			      EndIf
    			      ;}
    			    Case #Keystroke ;{ Keystroke (5 + Key + 5)  
    			      TextHeight = TextHeight(MarkDown()\Note()\Row()\Words()\String)
    			      MarkDown()\Note()\Row()\Words()\Width = TextWidth(MarkDown()\Note()\Row()\Words()\String) + dpiX(10)
    			      ;}
    			    Default  
                TextHeight = TextHeight(MarkDown()\Note()\Row()\Words()\String)
                MarkDown()\Note()\Row()\Words()\Width = TextWidth(MarkDown()\Note()\Row()\Words()\String)
            EndSelect
            
            MarkDown()\Note()\Row()\Width + MarkDown()\Note()\Row()\Words()\Width
            
            If TextHeight > MarkDown()\Note()\Row()\Height : MarkDown()\Note()\Row()\Height = TextHeight : EndIf
            
          Next

          MarkDown()\Note()\Row()\Height * MarkDown()\LineSpacing
          MarkDown()\Note()\Height + MarkDown()\Note()\Row()\Height 
          
        Next

        If MarkDown()\Note()\Width > MarkDown()\Required\Width : MarkDown()\Required\Width = MarkDown()\Note()\Width : EndIf 
        
      Next
      
      If ListSize(MarkDown()\Note()) : MarkDown()\Required\Height + MarkDown()\Note()\Height : EndIf
      ;}
      
      ;{ _____ Footnotes _____
      ForEach MarkDown()\FootLabel()
        
        Font = #PB_Default
        TextHeight = 0

        DrawingFont(FontID(MarkDown()\Font\FootText))
        MarkDown()\FootLabel()\Width  = 0
        MarkDown()\FootLabel()\Height = TextHeight("X")
        
        MarkDown()\Required\Height + MarkDown()\FootLabel()\Height
        
        ForEach MarkDown()\FootLabel()\Words()
          
          If Font <> MarkDown()\FootLabel()\Words()\Font : Font = DrawingFont_(MarkDown()\FootLabel()\Words()\Font) : EndIf

          Select MarkDown()\FootLabel()\Words()\Flag
            Case #Emoji     ;{ Emoji (16x16)
              TextHeight = dpiY(16)
              MarkDown()\FootLabel()\Words()\Width = dpiX(16)
              ;}
            Case #Image     ;{ Image
              
              If SelectElement(MarkDown()\Image(), MarkDown()\FootLabel()\Words()\Index)
                
                Image$ = GetFilePart(MarkDown()\Image()\Source)
                File$  = GetAbsolutePath_(MarkDown()\Path, MarkDown()\Image()\Source)
                
  			        If FindMapElement(MarkDown()\ImageNum(), Image$) = #False
  			          If AddMapElement(MarkDown()\ImageNum(), Image$) 
                    MarkDown()\ImageNum() = LoadImage(#PB_Any, File$)
                  EndIf
                EndIf
                
                If IsImage(MarkDown()\ImageNum())
  			          MarkDown()\Image()\Width  = ImageWidth(MarkDown()\ImageNum())
  			          MarkDown()\Image()\Height = ImageHeight(MarkDown()\ImageNum())
  			          TextHeight = dpiY(MarkDown()\Image()\Height)
  			          MarkDown()\Items()\Words()\Width = dpiX(MarkDown()\Image()\Width)  
  			        EndIf
  			        
  			      EndIf
  			      ;}
  			    Case #Keystroke ;{ Keystroke (5 + Key + 5)  
  			      TextHeight = TextHeight(MarkDown()\Items()\Words()\String)
  			      MarkDown()\Items()\Words()\Width = TextWidth(MarkDown()\Items()\Words()\String) + dpiX(10) 
  			      ;}  
  			    Default  
              TextHeight = TextHeight(MarkDown()\FootLabel()\Words()\String)
              MarkDown()\FootLabel()\Words()\Width = TextWidth(MarkDown()\FootLabel()\Words()\String)
          EndSelect
          
          MarkDown()\FootLabel()\Width + MarkDown()\FootLabel()\Words()\Width
          If TextHeight > MarkDown()\FootLabel()\Height : MarkDown()\FootLabel()\Height = TextHeight : EndIf
          
        Next
        
        MarkDown()\Required\Height + MarkDown()\FootLabel()\Height
        If MarkDown()\FootLabel()\Width > MarkDown()\Required\Width : MarkDown()\Required\Width = MarkDown()\FootLabel()\Width : EndIf 
        
      Next ;}
      
      ;{ _____ Table of Contents _____
      ForEach MarkDown()\TOC()
        
        Font = #PB_Default
        TextHeight = 0
        
        DrawingFont(FontID(MarkDown()\Font\Normal))
        
        MarkDown()\TOC()\Height = TextHeight("X")
        MarkDown()\TOC()\Width  = 0
        
        ForEach MarkDown()\TOC()\Words()
          
          If Font <> MarkDown()\TOC()\Words()\Font : Font = DrawingFont_(MarkDown()\TOC()\Words()\Font) : EndIf
        
          MarkDown()\TOC()\Width + TextWidth(MarkDown()\TOC()\Words()\String)
          
          TextHeight = TextHeight(MarkDown()\TOC()\Words()\String)
          If TextHeight > MarkDown()\TOC()\Height : MarkDown()\TOC()\Height = TextHeight : EndIf
          
        Next
        
        MarkDown()\TOC()\Height * 1.3
        
      Next
      ;}
      
      StopDrawing()
		EndIf
		
		If NoGadget
		  FreeImage(OutputNum)
		EndIf   
		
  EndProcedure	
  
  Procedure.s GetString_(List Words.Words_Structure())
	  Define.s Text$
	  
	  ForEach Words()
	    Text$ + Words()\String
	  Next
	  
	  ProcedureReturn Text$
	EndProcedure
	
	Procedure.i BlendColor_(Color1.i, Color2.i, Factor.i=50)
		Define.i Red1, Green1, Blue1, Red2, Green2, Blue2
		Define.f Blend = Factor / 100

		Red1 = Red(Color1): Green1 = Green(Color1): Blue1 = Blue(Color1)
		Red2 = Red(Color2): Green2 = Green(Color2): Blue2 = Blue(Color2)

		ProcedureReturn RGB((Red1 * Blend) + (Red2 * (1 - Blend)), (Green1 * Blend) + (Green2 * (1 - Blend)), (Blue1 * Blend) + (Blue2 * (1 - Blend)))
	EndProcedure
	
  ;- __________ Convert HTML __________
  
  CompilerIf #Enable_ExportHTML
    
    Procedure.s StyleCSS()
      Define.s Style$
      
      Style$ + "ul, ol { padding-left: 1em; }" + #LF$
      Style$ + "code { color:#006400; }" + #LF$
      Style$ + "blockquote { margin: 0 auto; padding: 0 0 0 0.5em; border-left: 5px solid #999; }" + #LF$ ; padding: 1em; 
      Style$ + "table { border-collapse: collapse; }" + #LF$
      Style$ + "td, th { border: 1px solid black; }" + #LF$
      Style$ + "dt { margin: 4px 2px 0 0; }" + #LF$ 
      Style$ + "dd { margin: 0 0 0 10px; }" + #LF$
      Style$ + ".footsup { font-weight: bold; }" + #LF$
      Style$ + ".tocul { List-style-type: none; padding: 0 0 4px 20px; }" + #LF$
      Style$ + ".tocli { padding: 3px; }" + #LF$
      Style$ + ".para { display: block; margin-bottom: 1em; }" + #LF$
      Style$ + ".center { display: block; margin-left: auto; margin-right: auto; }" + #LF$
      Style$ + ".bordered { background-color: #F6F6F6 ; border: 1px solid #848484; border-radius: 4px; padding: 1px 4px 1px 4px; }" + #LF$
      Style$ + ".footnote { font-size: 10pt; }" + #LF$
      Style$ + ".boxtitle { border: 2px solid #E3E3E3; border-radius: 10px 10px 0 0;  border-bottom: 1px solid #E3E3E3; padding: 10px; position: relative; }" + #LF$
      Style$ + ".box { border: 2px solid #E3E3E3; border-radius: 0 0 10px 10px; border-top: 1px solid #E3E3E3; padding: 10px; }" + #LF$
      Style$ + ".symbol { font-size:1.8em; margin: 0; position: absolute; top: 49%; -ms-transform: translateY(-50%); transform: translateY(-50%); }" + #LF$
      Style$ + ".note { position: relative; padding: 0 0 0 2.3em; }" + #LF$
      ProcedureReturn  Style$
    EndProcedure
    
    Procedure.s EscapeHTML_(String.s)
  	  Define.i c
  	  Define.s Char$, HTML$
  	  
  	  For c=1 To Len(String)
  	    
  	    Char$ = Mid(String, c, 1)
  	    Select Char$
  	      Case "&"
  	        HTML$ + "&amp;"
  	      Case "ß"
  	        HTML$ + "&szlig;"
  	      Case "©"
  	        HTML$ + "&copy;"
  	      Case "®"
  	        HTML$ + "&reg;"
  	      Case "™"
  	        HTML$ + "&trade;"
  	      Case "«"
  	        HTML$ + "&laquo;"
  	      Case "»"
  	        HTML$ + "&raquo;"
  	      Case "→"
  	        HTML$ + "&rarr;"
  	      Case "⇒"
  	        HTML$ + "&rArr;"
  	      Case "▸"
  	        HTML$ + "&blacktriangleright;"
  	      Case "·"
  	        HTML$ + "&middot;"
  	      Case "•"
  	        HTML$ + "&bull;"
  	      Case "…"
  	        HTML$ + "&hellip;"
  	      Case "✓"
  	        HTML$ + "&check;"
  	      Case "✗"
  	        HTML$ + "&cross;"
  	      Case "♪"
  	        HTML$ + "&sung;"
  	      Case "♥"
  	        HTML$ + "&hearts;"
  	      Case "★"
  	        HTML$ + "&bigstar;"
  	      Case "☎"
  	        HTML$ + "&phone;"
  	      Case "§"
  	        HTML$ + "&sect;"
  	      Case "¶"
  	        HTML$ + "&para;"
  	      Case "†"
  	        HTML$ + "&dagger;"
  	      Case "°"
  	        HTML$ + "&deg;"
  	      Case "¦"
  	        HTML$ + "&brvbar;"
  	      Case "'"
  	        HTML$ + "&apos;"
  	      Case "<"
  	        HTML$ + "&lt;"
  	      Case ">"
  	        HTML$ + "&gt;"
  	      Case #DQUOTE$
  	        HTML$ + "&quot;"
  	      Case "Ä"  
  	        HTML$ + "&Auml;"
  	      Case "ä"
  	        HTML$ + "&auml;"
  	      Case "Ë"
  	        HTML$ + "&Euml;"
  	      Case "ë"
  	        HTML$ + "&euml;"
  	      Case "Ï"
  	        HTML$ + "&Iuml;"
  	      Case "ï"
  	        HTML$ + "&iuml;"
  	      Case "Ö"
  	        HTML$ + "&Ouml;"
  	      Case "ö"
  	        HTML$ + "&ouml;"
  	      Case "Ü"
  	        HTML$ + "&Uuml;"
  	      Case "ü"
  	        HTML$ + "&uuml;"
  	      Case "Ÿ"
  	        HTML$ + "&Yuml;"
  	      Case "ÿ"
  	        HTML$ + "&yuml;"
  	      Case "¢"
  	        HTML$ + "&cent;"
  	      Case "€" 
  	        HTML$ + "&euro;"
  	      Case "£"
  	        HTML$ + "&pound;"
  	      Case "¤"
  	        HTML$ + "&curren;"
  	      Case "¥"
  	        HTML$ + "&yen;"
  	      Case "ƒ"
  	        HTML$ + "&fnof;"
  	      Case "!"
  	        HTML$ + "&excl;"
  	      Case "#"
  	        HTML$ + "&num;"
  	      Case "$"
  	        HTML$ + "&dollar;"
  	      Case "%"
  	        HTML$ + "&percnt;"
  	      Case "("
  	        HTML$ + "&lpar;"
  	      Case ")"
  	        HTML$ + "&rpar;"
  	      Case "*"
  	        HTML$ + "&ast;"
  	      Case "+"
  	        HTML$ + "&plus;"
  	      Case ","
  	        HTML$ + "&comma;"
  	      Case "/"
  	        HTML$ + "&sol;"
  	      Case ":"
  	        HTML$ + "&colon;"
  	      Case ";"
  	        HTML$ + "&semi;"
  	      Case "="
  	        HTML$ + "&equals;"
  	      Case "?"
  	        HTML$ + "&quest;"
  	      Case "@"
  	        HTML$ + "&commat;"
  	      Case "["
  	        HTML$ + "&lbrack;"
  	      Case "]"
  	        HTML$ + "&rbrack;"
  	      Case "\"
  	        HTML$ + "&bsol"  
  	      Case "^"
  	        HTML$ + "&Hat;"
  	      Case "_"
  	        HTML$ + "&lowbar;"
  	      Case "`"
  	        HTML$ + "&grave;"
  	      Case "{"
  	        HTML$ + "&lbrace;"  
  	      Case "}"
  	        HTML$ + "&rbrace;"
  	      Case "|"
  	        HTML$ + "&vert;" 
  	      Case "’"
  	        HTML$ + "&#96;"  
  	      Default
  	        HTML$ + Char$
  	    EndSelect
  	    
  	  Next  
  	  
  	  ProcedureReturn HTML$
  	EndProcedure
  	
  	Procedure.s StringHTML_(List Words.Words_Structure())
  	  Define.s Text$
  	  
  	  ForEach Words()
  	    Text$ + Words()\String
  	  Next
  	  
  	  ProcedureReturn EscapeHTML_(Text$)
  	EndProcedure
  	
  	Procedure.s TextHTML_(List Words.Words_Structure())
  	  Define.i Font, Flag
  	  Define.s HTML$, endTag$, Link$, Title$, String$, Image$, Size$
  	  
  	  ForEach Words()
  	    
  	    If Flag <> Words()\Flag
  	      
  	      HTML$ + endTag$
  
    	    Select Words()\Flag
    	      Case #Bold         ;{ Emphasis
    	        HTML$ + "<strong>" + EscapeHTML_(Words()\String)
    	        endTag$ = "</strong>"
    	      Case #Italic
    	        HTML$ + "<em>" + EscapeHTML_(Words()\String)
    	        endTag$ = "</em>"
    	      Case #Bold|#Italic
    	        HTML$ + "<strong><em>" + EscapeHTML_(Words()\String)
    	        endTag$ = "</strong></em>"
    	      Case #StrikeThrough
    	        HTML$ + "<del>" + EscapeHTML_(Words()\String)
    	        endTag$ = "</del>"
    	        ;}
    	      Case #Code         ;{ Code
    	        HTML$ + "<code class='codestyle'>" + EscapeHTML_(Words()\String)
    	        endTag$ = "</code>"
    	        ;}
    	      Case #AutoLink     ;{ URL / EMail
    	        
    	        If CountString(Words()\String, "@") = 1
                HTML$ + "<a href=" + #DQUOTE$ + "mailto:" + URLDecoder(Words()\String) + #DQUOTE$ + ">" + EscapeHTML_(Words()\String)
              Else  
                HTML$ + "<a href=" + #DQUOTE$ + URLDecoder(Words()\String) + #DQUOTE$ + ">" + EscapeHTML_(Words()\String)
              EndIf
              
              endTag$ = "</a>"
              ;}
    	      Case #Link         ;{ Links
    	        
    	        ; Take me to <a href="#pookie">pookie</a>
              ; <a name="pookie">this is pookie</a>
    	        
    	        If SelectElement(MarkDown()\Link(), Words()\Index)
              
                If MarkDown()\Link()\Label
                  If FindMapElement(MarkDown()\Label(), MarkDown()\Link()\Label)
                    Link$   = URLDecoder(MarkDown()\Label()\Destination)
                    Title$  = EscapeHTML_(MarkDown()\Label()\Title)
                    String$ = EscapeHTML_(MarkDown()\Label()\String)
                  EndIf  
                Else
                  Link$   = URLDecoder(MarkDown()\Link()\URL)
                  Title$  = EscapeHTML_(MarkDown()\Link()\Title)
                  String$ = EscapeHTML_(Words()\String)
                EndIf
                
                If Left(Link$, 6) = "#Page:" : Link$ = Mid(Link$, 7) + ".html" : EndIf  
                
                If MarkDown()\Link()\Title
                  HTML$ + "<a href=" + #DQUOTE$ + Link$ + #DQUOTE$ + " title=" + #DQUOTE$ + Title$ + #DQUOTE$ + ">" + String$
                Else  
                  HTML$ + "<a href=" + #DQUOTE$ + Link$ + #DQUOTE$ + ">" + String$
                EndIf
                
              EndIf
              
              endTag$ = "</a>"
              ;}
            Case #Glossary     ;{ Glossary
              Title$ = StringHTML_(MarkDown()\Glossary(Words()\String)\Words())
              HTML$ + "<a href=#" + #DQUOTE$ + Words()\String + #DQUOTE$ + " title=" + #DQUOTE$ + Title$ + #DQUOTE$ + ">" + EscapeHTML_(Words()\String) + "</a>"
              endTag$ = ""
              ;}
            Case #Highlight    ;{ Highlight
              If Right(Words()\String, 1) = " "
                HTML$ + "<mark>" + EscapeHTML_(RTrim(Words()\String))
                endTag$ = "</mark> "
              Else  
                HTML$ + "<mark>" + EscapeHTML_(Words()\String)
                endTag$ = "</mark>"
              EndIf
              ;}
            Case #Image        ;{ Images

              If SelectElement(MarkDown()\Image(), Words()\Index)
                
                If MarkDown()\Image()\Width And MarkDown()\Image()\Height
                  Image$ = " width=" + #DQUOTE$ + Str(MarkDown()\Image()\Width) + #DQUOTE$ + " height=" + #DQUOTE$ + Str(MarkDown()\Image()\Height) + #DQUOTE$ 
                Else
                  Image$ = ""
                EndIf
                
                If MarkDown()\Image()\Title
                  HTML$ + "<img src=" + #DQUOTE$ + MarkDown()\Image()\Source + #DQUOTE$ + " alt=" + #DQUOTE$ + EscapeHTML_(Words()\String) + #DQUOTE$ + Image$ + " title=" + #DQUOTE$ + EscapeHTML_(MarkDown()\Image()\Title) + #DQUOTE$ + " />"
                Else  
                  HTML$ + "<img src=" + #DQUOTE$ + MarkDown()\Image()\Source + #DQUOTE$ + " alt=" + #DQUOTE$ + EscapeHTML_(Words()\String) + #DQUOTE$ + Image$ + " />"
                EndIf
              EndIf
              
    	        endTag$ = ""
    	        ;}
    	      Case #Keyword      ;{ KeyWord
    	        HTML$ + EscapeHTML_(Words()\String)
    	        endTag$ = "" 
    	        ;}
    	      Case #FootNote     ;{ Footnotes
    	        HTML$ + "<sup class=" + #DQUOTE$ + "footsup" + #DQUOTE$ + ">"  + EscapeHTML_(Words()\String) + "</sup>"
    	        endTag$ = ""
    	        ;}
    	      Case #Superscript  ;{ SuperScript
    	        HTML$ + "<sup>" + EscapeHTML_(Words()\String) + "</sup>" 
    	        endTag$ = ""
    	        ;}
    	      Case #Subscript    ;{ SubScript
    	        HTML$ + "<sub>" + EscapeHTML_(Words()\String) + "</sub>"
    	        endTag$ = ""
    	        ;}
    	      Case #Underline    ;{ Underline
    	        HTML$ + "<u>" + EscapeHTML_(Words()\String)
    	        endTag$ = "</u>"
    	        ;}
    	      Case #Emoji        ;{ Emoji
    	        
              Select Words()\String
                Case ":laugh:", ":smiley:"
                  HTML$ + "&#128512;"
                Case ":smile:", ":simple_smile:"
                  HTML$ + "&#128578;"
                Case ":sad:"
                  HTML$ + "&#128577;"
                Case ":angry:"
                  HTML$ + "&#128544;"
                Case ":cool:", ":sunglasses:"
                  HTML$ + "&#128526;"
                Case ":smirk:"
                  HTML$ + "&#128527;"
                Case ":worry:", ":worried:"
                  HTML$ + "&#128543;"
                Case ":wink:"
                  HTML$ + "&#128521;"
                Case ":rolf:"
                  HTML$ + "&#129315;"
                Case ":eyes:", ":flushed:" 
                  HTML$ + "&#128580;"
                Case ":phone:" , ":telephone_receiver:"
                  HTML$ + "&#128222;"
                Case ":mail:", ":envelope:"
                  HTML$ + "&#9993;"
                Case ":date:", ":calendar:"
                  HTML$ + "&#128198;"
                Case ":memo:"
                  HTML$ + "&#128221;"
                Case ":pencil:", ":pencil2:"    
                  HTML$ + "&#9999;"
                Case ":bookmark:"
                  HTML$ + "&#128278;"
                Case ":clip:", ":paperclip:"
                  HTML$ + "&#128206"
                Case ":mag:", "magnifier"
                  HTML$ + "&#128270"
                Case ":bulb:"
                  HTML$ + "&#128161"
                Case ":warning:"  
                  HTML$ + "&#9888;"
              EndSelect
              
              endTag$ = "" 
              ;} 
            Case #Keystroke    ;{ Keystroke
              HTML$ + "<strong class=" + #DQUOTE$ + "bordered" + #DQUOTE$ + ">" +  EscapeHTML_(Words()\String) + "</strong>"
              ;}
            Default 
    	        HTML$ + EscapeHTML_(Words()\String)
    	        endTag$ = ""
    	    EndSelect
    	    
    	    Flag = Words()\Flag
    	    
    	  Else
    	    
    	    HTML$ + EscapeHTML_(Words()\String)
    	    
    	  EndIf
    	  
  	  Next 
  	  
  	  HTML$ + endTag$
  	  
  	  ProcedureReturn HTML$
  	EndProcedure
  	
  	Procedure.s ConvertHTML_()
  	  Define.i Level, c, ColWidth, Cols, tBody, Class, BlockQuote, DL
      Define.s HTML$, Style$, endTag$, Align$, Indent$, ID$, Link$, Title$, String$, Num$, ColSpan$, Image$, File$, Size$, Class$, BackColor$, Symbol$
      
      ForEach MarkDown()\Image() ;{ Images
       
        Image$ = GetFilePart(MarkDown()\Image()\Source)
        File$  = GetAbsolutePath_(MarkDown()\Path, MarkDown()\Image()\Source)
        
        If FindMapElement(MarkDown()\ImageNum(), Image$) = #False
          If AddMapElement(MarkDown()\ImageNum(), Image$)
            MarkDown()\ImageNum() = LoadImage(#PB_Any, File$)
          EndIf
        EndIf
        
        If IsImage(MarkDown()\ImageNum())
          MarkDown()\Image()\Width  = ImageWidth(MarkDown()\ImageNum())
          MarkDown()\Image()\Height = ImageHeight(MarkDown()\ImageNum())
        EndIf
        ;}
      Next   
      
      ForEach MarkDown()\Items()
        
        Select MarkDown()\Items()\BlockQuote ;{ Blockquotes
          Case 1, 2
            If Not BlockQuote
              HTML$ + "<blockquote>" + #LF$
              BlockQuote = #True
            EndIf  
          Case 0
            If BlockQuote
              HTML$ + "</blockquote>" + #LF$
              BlockQuote = #False
            EndIf ;}
        EndSelect
        
        If DL And MarkDown()\Items()\Type <> #DefinitionList
          HTML$ + "</dl>" + #LF$
          DL = #False
        EndIf
        
        Select MarkDown()\Items()\Type
          Case #Heading          ;{ Heading
            If MarkDown()\Items()\ID
              ID$ = " id=" + #DQUOTE$ + MarkDown()\Items()\ID + #DQUOTE$
              HTML$ + "<h"+Str(MarkDown()\Items()\Level) + ID$ + ">" + StringHTML_(MarkDown()\Items()\Words()) + "</h"+Str(MarkDown()\Items()\Level) + ">" + #LF$
            Else  
              HTML$ + "<h"+Str(MarkDown()\Items()\Level) + ">" + StringHTML_(MarkDown()\Items()\Words()) + "</h"+Str(MarkDown()\Items()\Level) + ">" + #LF$
            EndIf
            ;}
          Case #OrderedList      ;{ Ordered List
            
            Level = 0
            
            If SelectElement(MarkDown()\Lists(), MarkDown()\Items()\Index)
              
              If MarkDown()\Lists()\Start
                HTML$ + "<ol start=" + #DQUOTE$ + Str(MarkDown()\Lists()\Start) + #DQUOTE$ + ">" + #LF$
              Else
                HTML$ + "<ol>" + #LF$
              EndIf  
              
              ForEach MarkDown()\Lists()\Row()
                
                If Level < MarkDown()\Lists()\Row()\Level
                  HTML$ + "<ol>" + #LF$
                  endTag$ = "</ol>"
                  Level = MarkDown()\Lists()\Row()\Level
                ElseIf Level > MarkDown()\Lists()\Row()\Level
                  HTML$ + endTag$ + #LF$
                  Level = MarkDown()\Lists()\Row()\Level
                EndIf  
                
                HTML$ + "<li>" + TextHTML_( MarkDown()\Lists()\Row()\Words()) + "</li>" + #LF$
                
              Next
              
              HTML$ + "</ol>" + #LF$
              
            EndIf
            ;}
          Case #UnorderedList    ;{ Unordered List
            
            Level = 0
            
            If SelectElement(MarkDown()\Lists(), MarkDown()\Items()\Index)
  
              HTML$ + "<ul>" + #LF$
              
              ForEach MarkDown()\Lists()\Row()
                
                If Level < MarkDown()\Lists()\Row()\Level
                  HTML$ + "<ul>" + #LF$
                  endTag$ = "</ul>"
                  Level = MarkDown()\Lists()\Row()\Level
                ElseIf Level > MarkDown()\Lists()\Row()\Level
                  HTML$ + endTag$ + #LF$
                  Level = MarkDown()\Lists()\Row()\Level
                EndIf  
                
                HTML$ + "<li>" + TextHTML_( MarkDown()\Lists()\Row()\Words()) + "</li>" + #LF$
                
              Next
              
              HTML$ + "</ul>" + #LF$
              
            EndIf
            ;}
          Case #DefinitionList   ;{ Definition List
  
            If SelectElement(MarkDown()\Lists(), MarkDown()\Items()\Index)
              
              If Not DL
                HTML$ + "<dl>" + #LF$
                DL = #True
              EndIf
              
              HTML$ + "<dt><strong>" + StringHTML_(MarkDown()\Items()\Words()) + "</strong></dt>" + #LF$
              ForEach MarkDown()\Lists()\Row()
                HTML$ + "<dd>" + TextHTML_(MarkDown()\Lists()\Row()\Words()) + "</dd>" + #LF$
              Next
              
            EndIf  
  			    ;}  
          Case #Glossary         ;{ Glossary
            
            If SelectElement(MarkDown()\Lists(), MarkDown()\Items()\Index)
              
              HTML$ + "<dl>" + #LF$
              ForEach MarkDown()\Lists()\Row()
                HTML$ + "<dt><strong id=" + #DQUOTE$ + MarkDown()\Lists()\Row()\String + #DQUOTE$ + ">" + MarkDown()\Lists()\Row()\String + "</strong></dt>" + #LF$
                HTML$ + "<dd>" + TextHTML_(MarkDown()\Lists()\Row()\Words()) + "</dd>" + #LF$
              Next
              HTML$ + "</dl>" + #LF$
              
            EndIf 
            ;}
          Case #Line             ;{ Horizontal Rule
            HTML$ + "<hr />" + #LF$
            ;}
          Case #Paragraph        ;{ Paragraph
            HTML$ + "<span class=" + #DQUOTE$ + "para" + #DQUOTE$ + "></span>" + #LF$
            ;}
          Case #Image            ;{ Image
            
            If SelectElement(MarkDown()\Image(), MarkDown()\Items()\Index)
             
              String$ = ""
              ForEach MarkDown()\Items()\Words()
                String$ + MarkDown()\Items()\Words()\String
              Next   
              
              If MarkDown()\Image()\Width And MarkDown()\Image()\Height
                Image$ = " width=" + #DQUOTE$ + Str(MarkDown()\Image()\Width) + #DQUOTE$ + " height=" + #DQUOTE$ + Str(MarkDown()\Image()\Height) + #DQUOTE$ 
              Else
                Image$ = ""
              EndIf
              
              Class$ = " class="  + #DQUOTE$ + "center" + #DQUOTE$
              
              If MarkDown()\Image()\Title
                HTML$ + "<img src=" + #DQUOTE$ + MarkDown()\Image()\Source + #DQUOTE$ + " alt=" + #DQUOTE$ + EscapeHTML_(String$) + #DQUOTE$ + Image$ + " title=" + #DQUOTE$ + EscapeHTML_(MarkDown()\Image()\Title) + #DQUOTE$ + Class$ + " />"
              Else  
                HTML$ + "<img src=" + #DQUOTE$ + MarkDown()\Image()\Source + #DQUOTE$ + " alt=" + #DQUOTE$ + EscapeHTML_(String$) + #DQUOTE$ + Image$ + Class$ + " />"
              EndIf
              HTML$ + "<center>" + EscapeHTML_(String$) + "</center> <br>"
              
            EndIf
            ;}
          Case #TaskList         ;{ Task List
            
            If SelectElement(MarkDown()\Lists(), MarkDown()\Items()\Index)
              
              ForEach MarkDown()\Lists()\Row()
                
                If MarkDown()\Lists()\Row()\State
                  HTML$ + "<input type=" + #DQUOTE$ + "checkbox" + #DQUOTE$ + " checked=" + #DQUOTE$ + "checked" + #DQUOTE$ + ">" + #LF$
                Else
                  HTML$ + "<input type=" + #DQUOTE$ + "checkbox" + #DQUOTE$ + ">" + #LF$
                EndIf
                
                HTML$ + TextHTML_(MarkDown()\Lists()\Row()\Words()) + "<br>"
                
              Next
              
            EndIf
            ;}
          Case #Table            ;{ Table
            
            If SelectElement(MarkDown()\Table(), MarkDown()\Items()\Index)
  
              Cols = MarkDown()\Table()\Cols
              
              HTML$ + "<table>"  + #LF$ ;  border='1'
              
  		        ForEach MarkDown()\Table()\Row()
  
  		          If MarkDown()\Table()\Row()\Type = #TableHeader ;{ Table Header
  		            
  		            HTML$ + "<thead>" + #LF$ + "<tr class=" + #DQUOTE$ + "header" + #DQUOTE$ + ">" + #LF$
                  
  		            For c=1 To Cols
  		              
  		              Num$ = Str(c)
  		              
                    Select MarkDown()\Table()\Column(Str(c))\Align
                      Case "C"
                        HTML$ + "<th style=" + #DQUOTE$ + "text-align: center;" + #DQUOTE$ + ">" + TextHTML_(MarkDown()\Table()\Row()\Col(Num$)\Words()) + " &nbsp; </th>" + #LF$
                      Case "R"
                        HTML$ + "<th style=" + #DQUOTE$ + "text-align: right;"  + #DQUOTE$ + ">" + TextHTML_(MarkDown()\Table()\Row()\Col(Num$)\Words()) + " &nbsp; </th>" + #LF$
                      Default  
                        HTML$ + "<th style=" + #DQUOTE$ + "text-align: left"    + #DQUOTE$ + ">" + TextHTML_(MarkDown()\Table()\Row()\Col(Num$)\Words()) + " &nbsp; </th>" + #LF$
                    EndSelect
                    
                  Next
                  
                  HTML$ + "</tr>" + #LF$ + "</thead>" + #LF$
  		            ;}
  			        Else                                              ;{ Table Body
  			          
  			          If Not tBody
                    HTML$ + "<tbody>" + #LF$
                    tBody = #True
                  EndIf
                  
                  Class ! #True
                  If Class
                    HTML$ + "<tr class=" + #DQUOTE$ + "odd" + #DQUOTE$ + ">" + #LF$
                  Else
                    HTML$ + "<tr class=" + #DQUOTE$ + "even" + #DQUOTE$ + ">" + #LF$
                  EndIf 
  
                  For c=1 To Cols
                    
                    Num$ = Str(c)
                    
                    If MarkDown()\Table()\Row()\Col(Num$)\Span = 0 : Continue : EndIf
                    
                    If MarkDown()\Table()\Row()\Col(Num$)\Span > 1
                      ColSpan$ = " colspan=" + #DQUOTE$ + Str(MarkDown()\Table()\Row()\Col(Num$)\Span) + #DQUOTE$
                    Else
                      ColSpan$ = ""
                    EndIf
                    
                    Select MarkDown()\Table()\Column(Str(c))\Align
                      Case "C"
                        HTML$ + "<td" + ColSpan$ + " style=" + #DQUOTE$ + "text-align: center;" + #DQUOTE$ + ">" + TextHTML_(MarkDown()\Table()\Row()\Col(Num$)\Words()) + " &nbsp; </td>" + #LF$
                      Case "R"
                        HTML$ + "<td" + ColSpan$ + " style=" + #DQUOTE$ + "text-align: right;"  + #DQUOTE$ + ">" + TextHTML_(MarkDown()\Table()\Row()\Col(Num$)\Words()) + " &nbsp; </td>" + #LF$
                      Default  
                        HTML$ + "<td" + ColSpan$ + " style=" + #DQUOTE$ + "text-align: left;"   + #DQUOTE$ + ">" + TextHTML_(MarkDown()\Table()\Row()\Col(Num$)\Words()) + " &nbsp; </td>" + #LF$
                    EndSelect
                  Next
                  
                  HTML$ + "</tr>" + #LF$
  			          ;}
  			        EndIf
  
  			      Next
  			      
  			      HTML$+ "</tbody>" + #LF$ + "</table>" + #LF$
  			     
  		      EndIf
            ;}
          Case #Code             ;{ Code Block
            
            If SelectElement(MarkDown()\Block(), MarkDown()\Items()\Index)
    
              HTML$ + "<pre class=" + #DQUOTE$ + "code" + #DQUOTE$ + ">" + #LF$
              
              If MarkDown()\Block()\String
                HTML$ + "  <code class=" + #DQUOTE$ + "language-" + MarkDown()\Block()\String + #DQUOTE$ +  ">" + #LF$
              Else
                HTML$ + "  <code>" + #LF$
              EndIf
              
              ForEach MarkDown()\Block()\Row()
                HTML$ + Space(4) + EscapeHTML_(MarkDown()\Block()\Row()) + #LF$
              Next
  
              HTML$ + "  </code>" + #LF$ + "</pre>" + #LF$
              
            EndIf
            ;}
          Case #Note             ;{ Note
            
            If SelectElement(MarkDown()\Note(), MarkDown()\Items()\Index)
            
              Select MarkDown()\Note()\Type
                Case "info"  
                  Symbol$    = "<strong class=" + #DQUOTE$ + "symbol" + #DQUOTE$ + " style=" + #DQUOTE$ + "color:#4682B4" + #DQUOTE$ + ">&#x1F6C8; </strong>"
                  BackColor$ = "background-color:#C7D9E8"
                Case "question" 
                  Symbol$    = "<strong class=" + #DQUOTE$ + "symbol" + #DQUOTE$ + " style=" + #DQUOTE$ + "color:#9ACD32" + #DQUOTE$ + ">&nbsp;?</strong>"
                  BackColor$ = "background-color:#E1F0C1"
                Case "error"
                  Symbol$    = "<strong class=" + #DQUOTE$ + "symbol" + #DQUOTE$ + " style=" + #DQUOTE$ + "color:#B22222" + #DQUOTE$ + ">&nbsp;!</strong>"
                  BackColor$ = "background-color:#E8BDBD"
                Case "caution"
                  Symbol$    = "<strong class=" + #DQUOTE$ + "symbol" + #DQUOTE$ + " style=" + #DQUOTE$ + "color:#FF8C32" + #DQUOTE$ + ">&#x26A0; </strong>"
                  BackColor$ = "background-color:#FFDCB2"
              EndSelect
              
              HTML$ + "<div class=" + #DQUOTE$ + "boxtitle" + #DQUOTE$ + " style=" + #DQUOTE$ + BackColor$ + #DQUOTE$ + ">"
              HTML$ + Symbol$ + " <strong class=" + #DQUOTE$ + "note" + #DQUOTE$ + ">Note</strong>"
              HTML$ + "</div>"
              HTML$ + "<div class=" + #DQUOTE$ + "box" + #DQUOTE$ + ">"
              HTML$ + "Lore Ipsum"
              HTML$ + "</div>"
              
            EndIf  
            ;}
          Case #InsertTOC        ;{ Table of Contents
            
            Level = 0

            HTML$ + "<ul class="+ #DQUOTE$ + "tocul" + #DQUOTE$ + ">" + #LF$

            ForEach MarkDown()\TOC()
              
              If Level < MarkDown()\TOC()\Level
                HTML$ + "<ul class="+ #DQUOTE$ + "tocul" + #DQUOTE$ + ">" + #LF$
                Level = MarkDown()\TOC()\Level
              ElseIf Level > MarkDown()\TOC()\Level
                HTML$ + "</ul>" + #LF$
                Level = MarkDown()\TOC()\Level
              EndIf  
              
              If MarkDown()\TOC()\Label
                HTML$ + "<li class="+ #DQUOTE$ + "tocli" + #DQUOTE$ + "><a href=" + #DQUOTE$ + MarkDown()\TOC()\Label + ".html" + #DQUOTE$ + ">" + StringHTML_(MarkDown()\TOC()\Words()) + "</a></li>" + #LF$
              ElseIf MarkDown()\TOC()\ID
                HTML$ + "<li class="+ #DQUOTE$ + "tocli" + #DQUOTE$ + "><a href=#" + #DQUOTE$ + MarkDown()\TOC()\ID + #DQUOTE$ + ">" + StringHTML_(MarkDown()\TOC()\Words()) + "</a></li>" + #LF$
              EndIf
              
            Next 
            
            HTML$ + "</ul>" + #LF$
            ;}
          Default                ;{ Text
            
            HTML$ + TextHTML_(MarkDown()\Items()\Words())
            HTML$ + "<br>" + #LF$
            ;}
        EndSelect
  
      Next
      
      If DL : HTML$ + "</dl>" + #LF$ : EndIf
      
      If BlockQuote
        HTML$ + "</blockquote>" + #LF$
        BlockQuote = #False
      EndIf
      
      If ListSize(MarkDown()\Footnote()) ;{ Footnotes
        
        HTML$ + "<br>"
        HTML$ + "<section class=" + #DQUOTE$ + "footnote" + #DQUOTE$ + ">" + #LF$
        HTML$ + "<hr />" + #LF$
        ForEach MarkDown()\Footnote()
          HTML$ + "<sup class=" + #DQUOTE$ + "footsup" + #DQUOTE$ + ">" + EscapeHTML_(MarkDown()\FootNote()\Label) + "</sup> " + TextHTML_(MarkDown()\FootLabel(MarkDown()\FootNote()\Label)\Words()) + "<br>" + #LF$
        Next
  		  HTML$ + "</section>"+ #LF$
  		  ;}
  		EndIf
      
  	  ProcedureReturn HTML$
  	EndProcedure
  	
    Procedure.s ExportHTML_(Title.s="", FileCSS.s="")
      Define.s HTML$, Style$
      
      If FileCSS
        
        Style$ = "<link rel=" + #DQUOTE$ + "stylesheet" + #DQUOTE$ + " type=" + #DQUOTE$ + "text/css" + #DQUOTE$ + " href=" + #DQUOTE$ + FileCSS + #DQUOTE$ + ">"
        
        HTML$ = "<!DOCTYPE html>" + #LF$ + "<html>" + #LF$ + "<head>" + #LF$ + "<meta charset=" + #DQUOTE$ + "utf-8" + #DQUOTE$ + ">" + #LF$ + "<title>" + Title + "</title>" + #LF$ + Style$ + #LF$ + "</head>" + #LF$
        
      Else
        
        Style$ = "<style>" + #LF$
        Style$ + StyleCSS()
        Style$ + "</style>" + #LF$
  
        HTML$ = "<!DOCTYPE html>" + #LF$ + "<html>" + #LF$ + "<head>" + #LF$ + "<meta charset=" + #DQUOTE$ + "utf-8" + #DQUOTE$ + ">" + #LF$ + "<title>" + Title + "</title>" + #LF$ + Style$ + #LF$ + "</head>" + #LF$

      EndIf
      
      HTML$ + "<body>" + #LF$
      
      HTML$ + ConvertHTML_()
      
      HTML$ + "</body>" + #LF$ + "</html>" + #LF$ 
  
      ProcedureReturn HTML$
      
    EndProcedure
    
  CompilerEndIf
  
  ;- __________ Convert PDF __________
  
  CompilerIf Defined(PDF, #PB_Module)
    
    Procedure.i FontPDF_(PDF.i, Font.i, Underline.i=#False, FontSize.i=12)

      Select Font
        Case #FontNote
          PDF::SetFont(PDF, "Arial", "B", FontSize + 4)
        Case #Font_Bold
          If Underline
            PDF::SetFont(PDF, "Arial", "BU", FontSize)
          Else  
            PDF::SetFont(PDF, "Arial", "B", FontSize)
          EndIf  
        Case #Font_Italic
          If Underline
            PDF::SetFont(PDF, "Arial", "IU", FontSize)
          Else
            PDF::SetFont(PDF, "Arial", "I", FontSize)
          EndIf
        Case #Font_BoldItalic 
          If Underline
            PDF::SetFont(PDF, "Arial", "BIU", FontSize)
          Else
            PDF::SetFont(PDF, "Arial", "BI", FontSize)
          EndIf  
        Case #Font_FootText
          If Underline
            PDF::SetFont(PDF, "Arial", "U", FontSize - 3)
          Else
            PDF::SetFont(PDF, "Arial", "", FontSize - 3)
          EndIf  
        Case #Font_FootBold
          If Underline
            PDF::SetFont(PDF, "Arial", "BU", FontSize - 3)
          Else
            PDF::SetFont(PDF, "Arial", "B", FontSize - 3)
          EndIf  
        Case #Font_FootItalic
          If Underline
            PDF::SetFont(PDF, "Arial", "IU", FontSize - 3) 
          Else
            PDF::SetFont(PDF, "Arial", "I", FontSize - 3) 
          EndIf  
        Case #Font_FootBoldItalic
          If Underline
            PDF::SetFont(PDF, "Arial", "BIU", FontSize - 3)
          Else
            PDF::SetFont(PDF, "Arial", "BI", FontSize -3)
          EndIf  
        Case #Font_Code
          If Underline
            PDF::SetFont(PDF, "Courier New", "U", FontSize)
          Else
            PDF::SetFont(PDF, "Courier New", "", FontSize)
          EndIf  
        Case #Font_H6
          PDF::SetFont(PDF, "Arial", "B", FontSize - 4)
        Case #Font_H5
          PDF::SetFont(PDF, "Arial", "B", FontSize - 2)
        Case #Font_H4
          PDF::SetFont(PDF, "Arial", "B", FontSize)
        Case #Font_H3
          PDF::SetFont(PDF, "Arial", "B", FontSize + 2)
        Case #Font_H2
          PDF::SetFont(PDF, "Arial", "B", FontSize + 6)
        Case #Font_H1 
          PDF::SetFont(PDF, "Arial", "B", FontSize + 12)
        Default
          If Underline
            PDF::SetFont(PDF, "Arial", "U", FontSize)
          Else
            PDF::SetFont(PDF, "Arial", "", FontSize)
          EndIf   
      EndSelect
      ProcedureReturn Font
    EndProcedure
    
    Procedure.i EmojiPDF_(PDF.i, Emoji.s, X.i, Y.i, ImgSize.i)
  
      Select Emoji
        Case ":check0:"
          PDF::ImageMemory(PDF, "CheckBox0.png", ?Check0,    145, PDF::#Image_PNG, X, Y, ImgSize, ImgSize)
        Case ":check1:"
          PDF::ImageMemory(PDF, "CheckBox1.png", ?Check1,    276, PDF::#Image_PNG, X, Y, ImgSize, ImgSize)
        CompilerIf #Enable_Emoji  
  	    Case ":date:", ":calendar:"
  	      PDF::ImageMemory(PDF, "Date.png",      ?Calendar,  485, PDF::#Image_PNG, X, Y, ImgSize, ImgSize)
        Case ":mail:", ":envelope:"
          PDF::ImageMemory(PDF, "Mail.png",      ?Mail,      437, PDF::#Image_PNG, X, Y, ImgSize, ImgSize)
  	    Case ":bookmark:"
          PDF::ImageMemory(PDF, "BookMark.png",  ?BookMark,  334, PDF::#Image_PNG, X, Y, ImgSize, ImgSize)
  	    Case ":memo:"
          PDF::ImageMemory(PDF, "Memo.png",      ?Memo,      408, PDF::#Image_PNG, X, Y, ImgSize, ImgSize)
  	    Case ":pencil:", ":pencil2:"
          PDF::ImageMemory(PDF, "Pencil.png",    ?Pencil,    480, PDF::#Image_PNG, X, Y, ImgSize, ImgSize)
  	    Case ":phone:", ":telephone_receiver:"
          PDF::ImageMemory(PDF, "Phone.png",     ?Phone,     383, PDF::#Image_PNG, X, Y, ImgSize, ImgSize)
        Case  ":warning:"
          PDF::ImageMemory(PDF, "Warning.png",   ?Attention, 565, PDF::#Image_PNG, X, Y, ImgSize, ImgSize)
        Case ":bulb:"  
          PDF::ImageMemory(PDF, "Bulb.png",      ?Bulb,      396, PDF::#Image_PNG, X, Y, ImgSize, ImgSize)
        Case ":paperclip:", ":clip:" 
          PDF::ImageMemory(PDF, "Clip.png",      ?Clip,      474, PDF::#Image_PNG, X, Y, ImgSize, ImgSize)
        Case ":mag:", ":magnifier:"
          PDF::ImageMemory(PDF, "Mag.png",       ?Magnifier, 520, PDF::#Image_PNG, X, Y, ImgSize, ImgSize)
        Case ":laugh:", ":smiley:"
          PDF::ImageMemory(PDF, "Laugh.png",     ?Laugh,     568, PDF::#Image_PNG, X, Y, ImgSize, ImgSize)
        Case ":smile:", ":simple_smile:"
          PDF::ImageMemory(PDF, "Smile.png",     ?Smile,     512, PDF::#Image_PNG, X, Y, ImgSize, ImgSize)
        Case ":sad:"
          PDF::ImageMemory(PDF, "Sad.png",       ?Sad,       521, PDF::#Image_PNG, X, Y, ImgSize, ImgSize)
        Case ":angry:"
          PDF::ImageMemory(PDF, "Angry.png",     ?Angry,     540, PDF::#Image_PNG, X, Y, ImgSize, ImgSize)
        Case ":cool:", ":sunglasses:"
          PDF::ImageMemory(PDF, "Cool.png",      ?Cool,     629, PDF::#Image_PNG, X, Y, ImgSize, ImgSize)
        Case ":smirk:"
          PDF::ImageMemory(PDF, "Smirk.png",     ?Smirk,    532, PDF::#Image_PNG, X, Y, ImgSize, ImgSize)
        Case ":eyes:", ":flushed:"
          PDF::ImageMemory(PDF, "Eyes.png",      ?Eyes,      583, PDF::#Image_PNG, X, Y, ImgSize, ImgSize)
        Case ":rolf:"
          PDF::ImageMemory(PDF, "Rofl.png",      ?Rofl,      636, PDF::#Image_PNG, X, Y, ImgSize, ImgSize) 
        Case ":wink:"
          PDF::ImageMemory(PDF, "Wink.png",      ?Wink,      553, PDF::#Image_PNG, X, Y, ImgSize, ImgSize)
        Case ":worry:", ":worried:"
          PDF::ImageMemory(PDF, "Worry.png",     ?Worry,     554, PDF::#Image_PNG, X, Y, ImgSize, ImgSize)
        CompilerEndIf  
      EndSelect
        
    EndProcedure    

  	Procedure.i AlignOffsetPDF_(PDF.i, WordIdx.i, Width.i, Align.s, List Words.Words_Structure())
      Define.i TextWidth, OffsetX
      
      PushListPosition(Words())
      
      ForEach Words()
        
        If ListIndex(Words()) >= WordIdx
          
          If TextWidth + PDF::GetStringWidth(PDF, Words()\String) > Width
            Break
          Else  
            TextWidth + PDF::GetStringWidth(PDF, Words()\String)
          EndIf  
          
        EndIf
        
      Next
      
      PopListPosition(Words())
      
      Select Align
        Case "C"
          OffsetX = (Width - TextWidth) / 2
        Case "R"
          OffsetX = Width - TextWidth - 1
        Default
          OffsetX = 1
      EndSelect    
      
      ProcedureReturn OffsetX
    EndProcedure
  
    Procedure.i RowPDF_(PDF.i, X.i, BlockQuote.i, List Words.Words_Structure(), ColWidth.i=#False, Align.s="L", ID.s="", FontSize.i=12)
      Define.i PosX, PosY, Width, Height, Font, TextWidth, ImgSize, Image, WordIdx, bqY, bqHeight 
      Define.i OffSetX, OffSetY, OffSetBQ, LinkPDF
      Define.s Link$, ID$, File$
      
      If BlockQuote : OffSetBQ = 3 * BlockQuote : EndIf
      
      X + OffSetBQ

      WordIdx = 0

      If ColWidth
        OffSetX = AlignOffsetPDF_(PDF, WordIdx, ColWidth, Align, Words())
      EndIf
      
      PDF::SetPosX(PDF, X + OffSetX)
      bqY = PDF::GetPosY(PDF)
      
      ForEach Words()
        
        If Font <> Words()\Font : Font = FontPDF_(PDF, Words()\Font, #False, FontSize) : EndIf
        
        If Words()\Flag = #Underline
          FontPDF_(PDF, Words()\Font, #True, FontSize)
          Font = #PB_Default
        EndIf
        
        TextWidth = PDF::GetStringWidth(PDF, Words()\String)
        
        If PDF::GetPosX(PDF) + TextWidth > MarkDown()\WrapPos
          
          WordIdx = ListIndex(Words())
          
          If ColWidth
            OffSetX = AlignOffsetPDF_(PDF, WordIdx, ColWidth, Align, Words())
          EndIf
          
          PDF::Ln(PDF, 4.5)
          PDF::SetPosX(PDF, X + OffSetX)

          If BlockQuote
            bqHeight = PDF::GetPosY(PDF) - bqY
            PDF::SetColorRGB(PDF, PDF::#FillColor, 169, 169, 169)
            PDF::DrawRectangle(PDF, X - OffSetBQ, bqY, 1.4, bqHeight, PDF::#FillOnly)
            PDF::SetColorRGB(PDF, PDF::#FillColor, 255, 255, 255)
          EndIf
          
          bqY = PDF::GetPosY(PDF)

        EndIf

        Select Words()\Flag
          Case #Code           ;{ Code
            PDF::SetColorRGB(PDF, PDF::#TextColor, 0, 100, 0)
            PDF::Cell(PDF, Words()\String, TextWidth)
            PDF::SetColorRGB(PDF, PDF::#TextColor, 0, 0, 0)
            ;} 
          Case #Glossary       ;{ Glossary
            PDF::SetColorRGB(PDF, PDF::#TextColor, 0, 0, 128)
            PDF::Cell(PDF, Words()\String, TextWidth, #PB_Default, #False, PDF::#Right, "", #False, "Glossary")
            PDF::SetColorRGB(PDF, PDF::#TextColor, 0, 0, 0)
            ;}
          Case #AutoLink       ;{ AutoLink
            
            If SelectElement(MarkDown()\Link(), Words()\Index)
              
              PDF::SetFont(PDF, "Arial", "U", FontSize)
              PDF::SetColorRGB(PDF, PDF::#TextColor, 0, 0, 255)
              
              If CountString(Words()\String, "@") = 1
                LinkPDF = PDF::AddLinkURL(PDF, URLDecoder("mailto:" + MarkDown()\Link()\URL))
                PDF::Cell(PDF, Words()\String, TextWidth, #PB_Default, #False, PDF::#Right, "", #False, "", LinkPDF)
              Else  
                LinkPDF = PDF::AddLinkURL(PDF, URLDecoder(MarkDown()\Link()\URL))
                PDF::Cell(PDF, Words()\String, TextWidth, #PB_Default, #False, PDF::#Right, "", #False, "", LinkPDF)
              EndIf

              PDF::SetColorRGB(PDF, PDF::#TextColor, 0)
              FontPDF_(PDF, Words()\Font, #False, FontSize)
              
            EndIf
            ;}             
          Case #Emoji          ;{ Emoji 
            X = PDF::GetPosX(PDF)
            EmojiPDF_(PDF, Words()\String, X, #PB_Default, 4)
            PDF::SetPosX(PDF, X + 4)
            ;}  
          Case #FootNote       ;{ Footnote
            FontPDF_(PDF, #Font_FootBold, #False, FontSize)
            PDF::SubWrite(PDF, Words()\String, 4.5, 7, 5)
            ;}
          Case #Highlight      ;{ Highlighted text
            PDF::SetColorRGB(PDF, PDF::#FillColor, 252, 248, 227)
            PDF::Cell(PDF, Words()\String, TextWidth, #PB_Default, #False, PDF::#Right, "", #True)
            PDF::SetColorRGB(PDF, PDF::#FillColor, 255, 255, 255)
            ;}
          Case #Image          ;{ Image
        
            If SelectElement(MarkDown()\Image(), Words()\Index)
              
              PosX   = PDF::GetPosX(PDF)
              PosY   = PDF::GetPosY(PDF)
              Width  = mm_(MarkDown()\Image()\Width)
              Height = mm_(MarkDown()\Image()\Height)
              
              File$  = GetAbsolutePath_(MarkDown()\Path, MarkDown()\Image()\Source)
              
              If FindMapElement(MarkDown()\ImageMem(), GetFilePart(MarkDown()\Image()\Source))
                PDF::ImageMemory(PDF, GetFilePart(MarkDown()\Image()\Source), MarkDown()\ImageMem()\Buffer, MarkDown()\ImageMem()\Size, MarkDown()\ImageMem()\Type, PosX, PosY, Width, Height)
              Else  
                PDF::Image(PDF, File$, PosX, PosY, Width, Height)
              EndIf  
              
              PDF::SetPosY(PDF, PosY + Height)

            EndIf
            ;}    
          Case #Link           ;{ Link
            
            If SelectElement(MarkDown()\Link(), Words()\Index)
              
              PDF::SetFont(PDF, "Arial", "U", FontSize)
              PDF::SetColorRGB(PDF, PDF::#TextColor, 0, 0, 255)
              
              If MarkDown()\Link()\Label
                Link$ = Trim(MarkDown()\Label(MarkDown()\Link()\Label)\Destination)
              Else
                Link$ = Trim(MarkDown()\Link()\URL)
              EndIf 

              If Left(Link$, 1) = "#"
                PDF::Cell(PDF, Words()\String, TextWidth, #PB_Default, #False, PDF::#Right, "", #False, Link$)
              Else
                LinkPDF = PDF::AddLinkURL(PDF, URLDecoder(Link$))
                PDF::Cell(PDF, Words()\String, TextWidth, #PB_Default, #False, PDF::#Right, "", #False, "", LinkPDF)
              EndIf

              PDF::SetColorRGB(PDF, PDF::#TextColor, 0)
              FontPDF_(PDF, Words()\Font, #False, FontSize)
              
            EndIf
            ;}
          Case #Keyword        ;{ Keyword  
            PDF::Cell(PDF, Words()\String, TextWidth)
            ;}
          Case #Keystroke      ;{ Keystroke
            PDF::SetMargin(PDF, PDF::#CellMargin, 1)
            PDF::SetColorRGB(PDF, PDF::#FillColor, 245, 245, 245)
            PosY = PDF::GetPosY(PDF)
            PDF::SetPosY(PDF, PosY - 0.2)
            PDF::Cell(PDF, Words()\String, TextWidth + 2, 4.4, #True, PDF::#Right, "", #True)
            PDF::SetColorRGB(PDF, PDF::#FillColor, 255, 255, 255)
            PDF::SetMargin(PDF, PDF::#CellMargin, 0)
            PDF::SetPosY(PDF, PosY)
            ;}
          Case #StrikeThrough  ;{ Strikethrough text
            PDF::DividingLine(PDF, PDF::GetPosX(PDF), PDF::GetPosY(PDF) + 2, TextWidth)
            PDF::Cell(PDF, Words()\String, TextWidth)
            ;}
          Case #Superscript    ;{ Superscripted text
            PDF::SubWrite(PDF, Words()\String, 4.5, 7, 5.4)
            ;}
          Case #Subscript      ;{ Subscripted text
            PDF::SubWrite(PDF, Words()\String, 4.5, 7, -1)
            ;}  
          Default
            If ID
              PDF::Cell(PDF, Words()\String, TextWidth, #PB_Default, #False, PDF::#Right, "", #False, ID) 
            Else  
              PDF::Cell(PDF, Words()\String, TextWidth)
            EndIf
        EndSelect

      Next

      PDF::Ln(PDF)
      PDF::Ln(PDF, 0.5)
      
      If BlockQuote
        bqHeight = PDF::GetPosY(PDF) - bqY
        PDF::SetColorRGB(PDF, PDF::#FillColor, 169, 169, 169)
        PDF::DrawRectangle(PDF, X - OffSetBQ, bqY, 1.4, bqHeight, PDF::#FillOnly)
        PDF::SetColorRGB(PDF, PDF::#FillColor, 255, 255, 255)
      EndIf

    EndProcedure
    
    
    Procedure.i SymbolPDF(PDF.i, Char.s, X.i, Y.i, Height.i, Color.i, Triangle.i=#False)
      Define.f cWidth, OffsetX, OffsetY
      
      cWidth = (Height - 2.8) / 2
      
      OffsetX = cWidth / 2
      OffsetY = (Height / 2)
      
      If Triangle
        PDF::DrawTriangle(PDF, X - OffsetX, Y + (Height - 1.4), X + OffsetX, Y + 1.4, X + (cWidth + OffsetX), Y + (Height - 1.4))
      Else
        PDF::DrawCircle(PDF, X + OffsetX, Y + OffsetY, cWidth) 
      EndIf  

      OffsetX = (cWidth - PDF::GetStringWidth(PDF, Char)) / 2
      
      PDF::SetColorRGB(PDF, PDF::#TextColor, Red(Color), Green(Color), Blue(Color))
      
      If Triangle
        PDF::SetPosXY(PDF, X + OffsetX, Y + 0.7)
      Else  
        PDF::SetPosXY(PDF, X + OffsetX, Y + 0.2)
      EndIf
      
      PDF::Cell(PDF, Char, cWidth, Height)
      
      PDF::SetColorRGB(PDF, PDF::#TextColor, 0, 0, 0)
      
      ProcedureReturn X + (cWidth * 2)
    EndProcedure
    
    Procedure.i NotePDF(PDF.i, Index.i, X.i, Y.i, Width, FontSize.i) 
      Define.i PosX, Height, HeaderHeight, OffsetX, OffsetY, BackColor
      Define.s Symbol$, Char$
      
      If SelectElement(MarkDown()\Note(), Index)
        
        FontPDF_(PDF, #Font_Bold, #False, FontSize)
        
        Height = (ListSize(MarkDown()\Note()\Row()) + 1) * PDF::GetStringHeight(PDF) + 8
        HeaderHeight = PDF::GetStringHeight(PDF) + 4
        
        PDF::SetLineThickness(PDF, 0.4)
        
        Select MarkDown()\Note()\Type
          Case "info"  
            BackColor = BlendColor_($B48246, $FFFFFF, 30)
          Case "question"  
            BackColor = BlendColor_($32CD9A, $FFFFFF, 30)
          Case "error"
            BackColor = BlendColor_($2222B2, $FFFFFF, 30)
          Case "caution"
            BackColor = BlendColor_($008CFF, $FFFFFF, 30)
        EndSelect
        
        PDF::SetColorRGB(PDF, PDF::#FillColor, Red(BackColor), Green(BackColor), Blue(BackColor))

        PDF::DrawRoundedRectangle(PDF, X, Y, Width, HeaderHeight + 2, 2, PDF::#FillOnly)
        
        PDF::SetColorRGB(PDF, PDF::#FillColor, 255, 255, 255)
        PDF::DrawRectangle(PDF, X, Y + HeaderHeight, Width, 2, PDF::#FillOnly)
        
        PDF::SetColorRGB(PDF, PDF::#DrawColor, 227, 227, 227)
        
        PDF::DrawRoundedRectangle(PDF, X, Y, Width, Height, 2)
        PDF::DividingLine(PDF, X, Y + HeaderHeight, Width)
        
        Select MarkDown()\Note()\Type
          Case "info"
            PDF::SetColorRGB(PDF, PDF::#DrawColor, 70, 130, 180)
            PosX = SymbolPDF(PDF, "i", 14, Y, HeaderHeight, $B48246)
          Case "question"
            PDF::SetColorRGB(PDF, PDF::#DrawColor, 154, 205, 50)
            PosX = SymbolPDF(PDF, "?", 14, Y, HeaderHeight, $32CD9A)
          Case "error"
            PDF::SetColorRGB(PDF, PDF::#DrawColor, 178, 34, 34)
            PosX = SymbolPDF(PDF, "!", 14, Y, HeaderHeight, $2222B2)
          Case "caution"
            PDF::SetColorRGB(PDF, PDF::#DrawColor, 255, 140, 0)
            PosX = SymbolPDF(PDF, "!", 14, Y, HeaderHeight, $008CFF, #True)
        EndSelect   

        PDF::SetLineThickness(PDF, 0.2)
        
        PDF::SetPosY(PDF, Y + 2)
        
        RowPDF_(PDF, PosX + 1, #False, MarkDown()\Items()\Words(), Width, "L", "", FontSize)
        
        PDF::Ln(PDF, 3)
        
        ForEach MarkDown()\Note()\Row()
          RowPDF_(PDF, 13, #False, MarkDown()\Note()\Row()\Words(), Width, "L", "", FontSize)
        Next
        
        PDF::SetColorRGB(PDF, PDF::#DrawColor, 0, 0, 0)
        
        PDF::SetPosY(PDF, Y + Height)
      EndIf
      
    EndProcedure
    
    Procedure   ConvertPDF_(PDF.i, LeftMargin.i=10, RightMargin.i=10, FontSize.i=12, Level.i=#PB_Default)
      Define.i PosX, PosY, X, Y, Width, Height, LastX, LastWidth, TextWidth, Link
      Define.i RowX, RowY, TableWidth, RowHeight, maxWidth, Count, Sum
      Define.i c, Cols, ColWidth, OffSetX, Width, Height, PageWidth, cutWidth
      Define.f Factor
      Define.s Bullet$, Align$, Text$, Level$, Image$, File$, Num$
      
      NewMap ListNum.i()
      NewMap ColWidth.i()
      NewMap ColX.i()
      NewMap CellBorder.CellBorder_Structure()
      
      If PDF
        
        PDF::SetMargin(PDF, PDF::#TopMargin,  LeftMargin)
        PDF::SetMargin(PDF, PDF::#LeftMargin, RightMargin)
        
        PDF::SetMargin(PDF, PDF::#CellMargin, 0)
        
        PageWidth = PDF::GetPageWidth(PDF)
        
        ForEach MarkDown()\Image() ;{ Images
          
          Image$ = GetFilePart(MarkDown()\Image()\Source)
          File$  = GetAbsolutePath_(MarkDown()\Path, MarkDown()\Image()\Source)
          
          If Not FindMapElement(MarkDown()\ImageNum(), Image$)
            If AddMapElement(MarkDown()\ImageNum(), Image$)

              If FindMapElement(MarkDown()\ImageMem(), Image$)
                MarkDown()\ImageNum() = CatchImage(#PB_Any, MarkDown()\ImageMem()\Buffer, MarkDown()\ImageMem()\Size)
              Else  
                MarkDown()\ImageNum() = LoadImage(#PB_Any, File$)
              EndIf 
              
            EndIf
          EndIf
          
          If IsImage(MarkDown()\ImageNum())
	          MarkDown()\Image()\Width  = 